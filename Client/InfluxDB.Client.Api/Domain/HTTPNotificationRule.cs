/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// HTTPNotificationRule
    /// </summary>
    [DataContract(Name = "HTTPNotificationRule")]
    public partial class HTTPNotificationRule : HTTPNotificationRuleBase, IEquatable<HTTPNotificationRule>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HTTPNotificationRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HTTPNotificationRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HTTPNotificationRule" /> class.
        /// </summary>
        /// <param name="endpointID">endpointID (required).</param>
        /// <param name="orgID">The ID of the organization that owns this notification rule. (required).</param>
        /// <param name="taskID">The ID of the task associated with this notification rule..</param>
        /// <param name="status">status (required).</param>
        /// <param name="name">Human-readable name describing the notification rule. (required).</param>
        /// <param name="sleepUntil">sleepUntil.</param>
        /// <param name="every">The notification repetition interval..</param>
        /// <param name="offset">Duration to delay after the schedule, before executing check..</param>
        /// <param name="runbookLink">runbookLink.</param>
        /// <param name="limitEvery">Don&#39;t notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limit cannot be empty..</param>
        /// <param name="limit">Don&#39;t notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limitEvery cannot be empty..</param>
        /// <param name="tagRules">List of tag rules the notification rule attempts to match..</param>
        /// <param name="description">An optional description of the notification rule..</param>
        /// <param name="statusRules">List of status rules the notification rule attempts to match. (required).</param>
        /// <param name="labels">labels.</param>
        /// <param name="links">links.</param>
        /// <param name="type">type (required).</param>
        /// <param name="url">url.</param>
        public HTTPNotificationRule(string endpointID = default(string), string orgID = default(string), string taskID = default(string), TaskStatusType status = default(TaskStatusType), string name = default(string), string sleepUntil = default(string), string every = default(string), string offset = default(string), string runbookLink = default(string), int limitEvery = default(int), int limit = default(int), List<TagRule> tagRules = default(List<TagRule>), string description = default(string), List<StatusRule> statusRules = default(List<StatusRule>), List<Label> labels = default(List<Label>), NotificationRuleBaseLinks links = default(NotificationRuleBaseLinks), TypeEnum type = default(TypeEnum), string url = default(string)) : base(type, url, endpointID, orgID, taskID, status, name, sleepUntil, every, offset, runbookLink, limitEvery, limit, tagRules, description, statusRules, labels, links)
        {
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HTTPNotificationRule {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HTTPNotificationRule);
        }

        /// <summary>
        /// Returns true if HTTPNotificationRule instances are equal
        /// </summary>
        /// <param name="input">Instance of HTTPNotificationRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HTTPNotificationRule input)
        {
            if (input == null)
                return false;

            return base.Equals(input);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                return hashCode;
            }
        }

    }

}

/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// The delete predicate request.
    /// </summary>
    [DataContract(Name = "DeletePredicateRequest")]
    public partial class DeletePredicateRequest : IEquatable<DeletePredicateRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletePredicateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeletePredicateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletePredicateRequest" /> class.
        /// </summary>
        /// <param name="start">RFC3339Nano (required).</param>
        /// <param name="stop">RFC3339Nano (required).</param>
        /// <param name="predicate">InfluxQL-like delete statement.</param>
        public DeletePredicateRequest(DateTime start = default(DateTime), DateTime stop = default(DateTime), string predicate = default(string))
        {
            this.Start = start;
            this.Stop = stop;
            this.Predicate = predicate;
        }

        /// <summary>
        /// RFC3339Nano
        /// </summary>
        /// <value>RFC3339Nano</value>
        [DataMember(Name = "start", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Start { get; set; }

        /// <summary>
        /// RFC3339Nano
        /// </summary>
        /// <value>RFC3339Nano</value>
        [DataMember(Name = "stop", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Stop { get; set; }

        /// <summary>
        /// InfluxQL-like delete statement
        /// </summary>
        /// <value>InfluxQL-like delete statement</value>
        [DataMember(Name = "predicate", EmitDefaultValue = false)]
        public string Predicate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeletePredicateRequest {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  Predicate: ").Append(Predicate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeletePredicateRequest);
        }

        /// <summary>
        /// Returns true if DeletePredicateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DeletePredicateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeletePredicateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Stop == input.Stop ||
                    (this.Stop != null &&
                    this.Stop.Equals(input.Stop))
                ) && 
                (
                    this.Predicate == input.Predicate ||
                    (this.Predicate != null &&
                    this.Predicate.Equals(input.Predicate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Stop != null)
                    hashCode = hashCode * 59 + this.Stop.GetHashCode();
                if (this.Predicate != null)
                    hashCode = hashCode * 59 + this.Predicate.GetHashCode();
                return hashCode;
            }
        }

    }

}

/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// TelegramNotificationRuleBase
    /// </summary>
    [DataContract(Name = "TelegramNotificationRuleBase")]
    public partial class TelegramNotificationRuleBase : NotificationRule, IEquatable<TelegramNotificationRuleBase>
    {
        /// <summary>
        /// The discriminator between other types of notification rules is \&quot;telegram\&quot;.
        /// </summary>
        /// <value>The discriminator between other types of notification rules is \&quot;telegram\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Telegram for value: telegram
            /// </summary>
            [EnumMember(Value = "telegram")]
            Telegram = 1

        }


        /// <summary>
        /// The discriminator between other types of notification rules is \&quot;telegram\&quot;.
        /// </summary>
        /// <value>The discriminator between other types of notification rules is \&quot;telegram\&quot;.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \&quot;MarkdownV2\&quot; .
        /// </summary>
        /// <value>Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \&quot;MarkdownV2\&quot; .</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParseModeEnum
        {
            /// <summary>
            /// Enum MarkdownV2 for value: MarkdownV2
            /// </summary>
            [EnumMember(Value = "MarkdownV2")]
            MarkdownV2 = 1,

            /// <summary>
            /// Enum HTML for value: HTML
            /// </summary>
            [EnumMember(Value = "HTML")]
            HTML = 2,

            /// <summary>
            /// Enum Markdown for value: Markdown
            /// </summary>
            [EnumMember(Value = "Markdown")]
            Markdown = 3

        }


        /// <summary>
        /// Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \&quot;MarkdownV2\&quot; .
        /// </summary>
        /// <value>Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \&quot;MarkdownV2\&quot; .</value>
        [DataMember(Name = "parseMode", EmitDefaultValue = false)]
        public ParseModeEnum? ParseMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TelegramNotificationRuleBase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TelegramNotificationRuleBase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TelegramNotificationRuleBase" /> class.
        /// </summary>
        /// <param name="type">The discriminator between other types of notification rules is \&quot;telegram\&quot;. (required).</param>
        /// <param name="messageTemplate">The message template as a flux interpolated string. (required).</param>
        /// <param name="parseMode">Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to \&quot;MarkdownV2\&quot; ..</param>
        /// <param name="disableWebPagePreview">Disables preview of web links in the sent messages when \&quot;true\&quot;. Defaults to \&quot;false\&quot; ..</param>
        /// <param name="endpointID">endpointID (required).</param>
        /// <param name="orgID">The ID of the organization that owns this notification rule. (required).</param>
        /// <param name="taskID">The ID of the task associated with this notification rule..</param>
        /// <param name="status">status (required).</param>
        /// <param name="name">Human-readable name describing the notification rule. (required).</param>
        /// <param name="sleepUntil">sleepUntil.</param>
        /// <param name="every">The notification repetition interval..</param>
        /// <param name="offset">Duration to delay after the schedule, before executing check..</param>
        /// <param name="runbookLink">runbookLink.</param>
        /// <param name="limitEvery">Don&#39;t notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limit cannot be empty..</param>
        /// <param name="limit">Don&#39;t notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limitEvery cannot be empty..</param>
        /// <param name="tagRules">List of tag rules the notification rule attempts to match..</param>
        /// <param name="description">An optional description of the notification rule..</param>
        /// <param name="statusRules">List of status rules the notification rule attempts to match. (required).</param>
        /// <param name="labels">labels.</param>
        /// <param name="links">links.</param>
        public TelegramNotificationRuleBase(TypeEnum type = default(TypeEnum), string messageTemplate = default(string), ParseModeEnum? parseMode = default(ParseModeEnum?), bool disableWebPagePreview = default(bool), string endpointID = default(string), string orgID = default(string), string taskID = default(string), TaskStatusType status = default(TaskStatusType), string name = default(string), string sleepUntil = default(string), string every = default(string), string offset = default(string), string runbookLink = default(string), int limitEvery = default(int), int limit = default(int), List<TagRule> tagRules = default(List<TagRule>), string description = default(string), List<StatusRule> statusRules = default(List<StatusRule>), List<Label> labels = default(List<Label>), NotificationRuleBaseLinks links = default(NotificationRuleBaseLinks)) : base(endpointID, orgID, taskID, status, name, sleepUntil, every, offset, runbookLink, limitEvery, limit, tagRules, description, statusRules, labels, links)
        {
            this.Type = type;
            // to ensure "messageTemplate" is required (not null)
            if (messageTemplate == null) {
                throw new ArgumentNullException("messageTemplate is a required property for TelegramNotificationRuleBase and cannot be null");
            }
            this.MessageTemplate = messageTemplate;
            this.ParseMode = parseMode;
            this.DisableWebPagePreview = disableWebPagePreview;
        }

        /// <summary>
        /// The message template as a flux interpolated string.
        /// </summary>
        /// <value>The message template as a flux interpolated string.</value>
        [DataMember(Name = "messageTemplate", IsRequired = true, EmitDefaultValue = false)]
        public string MessageTemplate { get; set; }

        /// <summary>
        /// Disables preview of web links in the sent messages when \&quot;true\&quot;. Defaults to \&quot;false\&quot; .
        /// </summary>
        /// <value>Disables preview of web links in the sent messages when \&quot;true\&quot;. Defaults to \&quot;false\&quot; .</value>
        [DataMember(Name = "disableWebPagePreview", EmitDefaultValue = true)]
        public bool DisableWebPagePreview { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TelegramNotificationRuleBase {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MessageTemplate: ").Append(MessageTemplate).Append("\n");
            sb.Append("  ParseMode: ").Append(ParseMode).Append("\n");
            sb.Append("  DisableWebPagePreview: ").Append(DisableWebPagePreview).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelegramNotificationRuleBase);
        }

        /// <summary>
        /// Returns true if TelegramNotificationRuleBase instances are equal
        /// </summary>
        /// <param name="input">Instance of TelegramNotificationRuleBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelegramNotificationRuleBase input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && base.Equals(input) && 
                (
                    this.MessageTemplate == input.MessageTemplate ||
                    (this.MessageTemplate != null &&
                    this.MessageTemplate.Equals(input.MessageTemplate))
                ) && base.Equals(input) && 
                (
                    this.ParseMode == input.ParseMode ||
                    this.ParseMode.Equals(input.ParseMode)
                ) && base.Equals(input) && 
                (
                    this.DisableWebPagePreview == input.DisableWebPagePreview ||
                    this.DisableWebPagePreview.Equals(input.DisableWebPagePreview)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MessageTemplate != null)
                    hashCode = hashCode * 59 + this.MessageTemplate.GetHashCode();
                hashCode = hashCode * 59 + this.ParseMode.GetHashCode();
                hashCode = hashCode * 59 + this.DisableWebPagePreview.GetHashCode();
                return hashCode;
            }
        }

    }

}

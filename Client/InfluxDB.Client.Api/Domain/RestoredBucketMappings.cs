/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// RestoredBucketMappings
    /// </summary>
    [DataContract(Name = "RestoredBucketMappings")]
    public partial class RestoredBucketMappings : IEquatable<RestoredBucketMappings>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RestoredBucketMappings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RestoredBucketMappings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RestoredBucketMappings" /> class.
        /// </summary>
        /// <param name="id">New ID of the restored bucket (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="shardMappings">shardMappings (required).</param>
        public RestoredBucketMappings(string id = default(string), string name = default(string), List<BucketShardMapping> shardMappings = default(List<BucketShardMapping>))
        {
            // to ensure "id" is required (not null)
            if (id == null) {
                throw new ArgumentNullException("id is a required property for RestoredBucketMappings and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for RestoredBucketMappings and cannot be null");
            }
            this.Name = name;
            // to ensure "shardMappings" is required (not null)
            if (shardMappings == null) {
                throw new ArgumentNullException("shardMappings is a required property for RestoredBucketMappings and cannot be null");
            }
            this.ShardMappings = shardMappings;
        }

        /// <summary>
        /// New ID of the restored bucket
        /// </summary>
        /// <value>New ID of the restored bucket</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ShardMappings
        /// </summary>
        [DataMember(Name = "shardMappings", IsRequired = true, EmitDefaultValue = false)]
        public List<BucketShardMapping> ShardMappings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RestoredBucketMappings {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShardMappings: ").Append(ShardMappings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RestoredBucketMappings);
        }

        /// <summary>
        /// Returns true if RestoredBucketMappings instances are equal
        /// </summary>
        /// <param name="input">Instance of RestoredBucketMappings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RestoredBucketMappings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShardMappings == input.ShardMappings ||
                    this.ShardMappings != null &&
                    input.ShardMappings != null &&
                    this.ShardMappings.SequenceEqual(input.ShardMappings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ShardMappings != null)
                    hashCode = hashCode * 59 + this.ShardMappings.GetHashCode();
                return hashCode;
            }
        }

    }

}

/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// ShardManifest
    /// </summary>
    [DataContract(Name = "ShardManifest")]
    public partial class ShardManifest : IEquatable<ShardManifest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShardManifest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShardManifest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShardManifest" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="shardOwners">shardOwners (required).</param>
        public ShardManifest(long id = default(long), List<ShardOwner> shardOwners = default(List<ShardOwner>))
        {
            this.Id = id;
            // to ensure "shardOwners" is required (not null)
            if (shardOwners == null) {
                throw new ArgumentNullException("shardOwners is a required property for ShardManifest and cannot be null");
            }
            this.ShardOwners = shardOwners;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets ShardOwners
        /// </summary>
        [DataMember(Name = "shardOwners", IsRequired = true, EmitDefaultValue = false)]
        public List<ShardOwner> ShardOwners { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShardManifest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShardOwners: ").Append(ShardOwners).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShardManifest);
        }

        /// <summary>
        /// Returns true if ShardManifest instances are equal
        /// </summary>
        /// <param name="input">Instance of ShardManifest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShardManifest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ShardOwners == input.ShardOwners ||
                    this.ShardOwners != null &&
                    input.ShardOwners != null &&
                    this.ShardOwners.SequenceEqual(input.ShardOwners)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ShardOwners != null)
                    hashCode = hashCode * 59 + this.ShardOwners.GetHashCode();
                return hashCode;
            }
        }

    }

}

/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// Selects one of two expressions, &#x60;Alternate&#x60; or &#x60;Consequent&#x60;, depending on a third boolean expression, &#x60;Test&#x60;
    /// </summary>
    [DataContract(Name = "ConditionalExpression")]
    public partial class ConditionalExpression : Expression, IEquatable<ConditionalExpression>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionalExpression" /> class.
        /// </summary>
        /// <param name="type">Type of AST node.</param>
        /// <param name="test">test.</param>
        /// <param name="alternate">alternate.</param>
        /// <param name="consequent">consequent.</param>
        public ConditionalExpression(string type = default(string), Expression test = default(Expression), Expression alternate = default(Expression), Expression consequent = default(Expression)) : base()
        {
            this.Type = type;
            this.Test = test;
            this.Alternate = alternate;
            this.Consequent = consequent;
        }

        /// <summary>
        /// Type of AST node
        /// </summary>
        /// <value>Type of AST node</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Test
        /// </summary>
        [DataMember(Name = "test", EmitDefaultValue = false)]
        public Expression Test { get; set; }

        /// <summary>
        /// Gets or Sets Alternate
        /// </summary>
        [DataMember(Name = "alternate", EmitDefaultValue = false)]
        public Expression Alternate { get; set; }

        /// <summary>
        /// Gets or Sets Consequent
        /// </summary>
        [DataMember(Name = "consequent", EmitDefaultValue = false)]
        public Expression Consequent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConditionalExpression {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  Alternate: ").Append(Alternate).Append("\n");
            sb.Append("  Consequent: ").Append(Consequent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConditionalExpression);
        }

        /// <summary>
        /// Returns true if ConditionalExpression instances are equal
        /// </summary>
        /// <param name="input">Instance of ConditionalExpression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConditionalExpression input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.Test == input.Test ||
                    (this.Test != null &&
                    this.Test.Equals(input.Test))
                ) && base.Equals(input) && 
                (
                    this.Alternate == input.Alternate ||
                    (this.Alternate != null &&
                    this.Alternate.Equals(input.Alternate))
                ) && base.Equals(input) && 
                (
                    this.Consequent == input.Consequent ||
                    (this.Consequent != null &&
                    this.Consequent.Equals(input.Consequent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Test != null)
                    hashCode = hashCode * 59 + this.Test.GetHashCode();
                if (this.Alternate != null)
                    hashCode = hashCode * 59 + this.Alternate.GetHashCode();
                if (this.Consequent != null)
                    hashCode = hashCode * 59 + this.Consequent.GetHashCode();
                return hashCode;
            }
        }

    }

}

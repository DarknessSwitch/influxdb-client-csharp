/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// RangeThresholdAllOf
    /// </summary>
    [DataContract(Name = "RangeThreshold_allOf")]
    public partial class RangeThresholdAllOf : IEquatable<RangeThresholdAllOf>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Range for value: range
            /// </summary>
            [EnumMember(Value = "range")]
            Range = 1

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RangeThresholdAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RangeThresholdAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RangeThresholdAllOf" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="min">min (required).</param>
        /// <param name="max">max (required).</param>
        /// <param name="within">within (required).</param>
        public RangeThresholdAllOf(TypeEnum type = default(TypeEnum), float min = default(float), float max = default(float), bool within = default(bool))
        {
            this.Type = type;
            this.Min = min;
            this.Max = max;
            this.Within = within;
        }

        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name = "min", IsRequired = true, EmitDefaultValue = false)]
        public float Min { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name = "max", IsRequired = true, EmitDefaultValue = false)]
        public float Max { get; set; }

        /// <summary>
        /// Gets or Sets Within
        /// </summary>
        [DataMember(Name = "within", IsRequired = true, EmitDefaultValue = true)]
        public bool Within { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RangeThresholdAllOf {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Within: ").Append(Within).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RangeThresholdAllOf);
        }

        /// <summary>
        /// Returns true if RangeThresholdAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of RangeThresholdAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RangeThresholdAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Min == input.Min ||
                    this.Min.Equals(input.Min)
                ) && 
                (
                    this.Max == input.Max ||
                    this.Max.Equals(input.Max)
                ) && 
                (
                    this.Within == input.Within ||
                    this.Within.Equals(input.Within)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Min.GetHashCode();
                hashCode = hashCode * 59 + this.Max.GetHashCode();
                hashCode = hashCode * 59 + this.Within.GetHashCode();
                return hashCode;
            }
        }

    }

}

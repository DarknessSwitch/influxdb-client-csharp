/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// BandViewProperties
    /// </summary>
    [DataContract(Name = "BandViewProperties")]
    public partial class BandViewProperties : ViewProperties, IEquatable<BandViewProperties>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Band for value: band
            /// </summary>
            [EnumMember(Value = "band")]
            Band = 1

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines Shape
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShapeEnum
        {
            /// <summary>
            /// Enum ChronografV2 for value: chronograf-v2
            /// </summary>
            [EnumMember(Value = "chronograf-v2")]
            ChronografV2 = 1

        }


        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name = "shape", IsRequired = true, EmitDefaultValue = false)]
        public ShapeEnum Shape { get; set; }
        /// <summary>
        /// Defines HoverDimension
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HoverDimensionEnum
        {
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 1,

            /// <summary>
            /// Enum X for value: x
            /// </summary>
            [EnumMember(Value = "x")]
            X = 2,

            /// <summary>
            /// Enum Y for value: y
            /// </summary>
            [EnumMember(Value = "y")]
            Y = 3,

            /// <summary>
            /// Enum Xy for value: xy
            /// </summary>
            [EnumMember(Value = "xy")]
            Xy = 4

        }


        /// <summary>
        /// Gets or Sets HoverDimension
        /// </summary>
        [DataMember(Name = "hoverDimension", EmitDefaultValue = false)]
        public HoverDimensionEnum? HoverDimension { get; set; }

        /// <summary>
        /// Gets or Sets Geom
        /// </summary>
        [DataMember(Name = "geom", IsRequired = true, EmitDefaultValue = false)]
        public XYGeom Geom { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BandViewProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BandViewProperties() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BandViewProperties" /> class.
        /// </summary>
        /// <param name="timeFormat">timeFormat.</param>
        /// <param name="type">type (required).</param>
        /// <param name="queries">queries (required).</param>
        /// <param name="colors">Colors define color encoding of data into a visualization (required).</param>
        /// <param name="shape">shape (required).</param>
        /// <param name="note">note (required).</param>
        /// <param name="showNoteWhenEmpty">If true, will display note when empty (required).</param>
        /// <param name="axes">axes (required).</param>
        /// <param name="staticLegend">staticLegend.</param>
        /// <param name="xColumn">xColumn.</param>
        /// <param name="generateXAxisTicks">generateXAxisTicks.</param>
        /// <param name="xTotalTicks">xTotalTicks.</param>
        /// <param name="xTickStart">xTickStart.</param>
        /// <param name="xTickStep">xTickStep.</param>
        /// <param name="yColumn">yColumn.</param>
        /// <param name="generateYAxisTicks">generateYAxisTicks.</param>
        /// <param name="yTotalTicks">yTotalTicks.</param>
        /// <param name="yTickStart">yTickStart.</param>
        /// <param name="yTickStep">yTickStep.</param>
        /// <param name="upperColumn">upperColumn.</param>
        /// <param name="mainColumn">mainColumn.</param>
        /// <param name="lowerColumn">lowerColumn.</param>
        /// <param name="hoverDimension">hoverDimension.</param>
        /// <param name="geom">geom (required).</param>
        /// <param name="legendColorizeRows">legendColorizeRows.</param>
        /// <param name="legendHide">legendHide.</param>
        /// <param name="legendOpacity">legendOpacity.</param>
        /// <param name="legendOrientationThreshold">legendOrientationThreshold.</param>
        public BandViewProperties(string timeFormat = default(string), TypeEnum type = default(TypeEnum), List<DashboardQuery> queries = default(List<DashboardQuery>), List<DashboardColor> colors = default(List<DashboardColor>), ShapeEnum shape = default(ShapeEnum), string note = default(string), bool showNoteWhenEmpty = default(bool), Axes axes = default(Axes), StaticLegend staticLegend = default(StaticLegend), string xColumn = default(string), List<string> generateXAxisTicks = default(List<string>), int xTotalTicks = default(int), float xTickStart = default(float), float xTickStep = default(float), string yColumn = default(string), List<string> generateYAxisTicks = default(List<string>), int yTotalTicks = default(int), float yTickStart = default(float), float yTickStep = default(float), string upperColumn = default(string), string mainColumn = default(string), string lowerColumn = default(string), HoverDimensionEnum? hoverDimension = default(HoverDimensionEnum?), XYGeom geom = default(XYGeom), bool legendColorizeRows = default(bool), bool legendHide = default(bool), float legendOpacity = default(float), int legendOrientationThreshold = default(int)) : base()
        {
            this.Type = type;
            // to ensure "queries" is required (not null)
            if (queries == null) {
                throw new ArgumentNullException("queries is a required property for BandViewProperties and cannot be null");
            }
            this.Queries = queries;
            // to ensure "colors" is required (not null)
            if (colors == null) {
                throw new ArgumentNullException("colors is a required property for BandViewProperties and cannot be null");
            }
            this.Colors = colors;
            this.Shape = shape;
            // to ensure "note" is required (not null)
            if (note == null) {
                throw new ArgumentNullException("note is a required property for BandViewProperties and cannot be null");
            }
            this.Note = note;
            this.ShowNoteWhenEmpty = showNoteWhenEmpty;
            // to ensure "axes" is required (not null)
            if (axes == null) {
                throw new ArgumentNullException("axes is a required property for BandViewProperties and cannot be null");
            }
            this.Axes = axes;
            this.Geom = geom;
            this.TimeFormat = timeFormat;
            this.StaticLegend = staticLegend;
            this.XColumn = xColumn;
            this.GenerateXAxisTicks = generateXAxisTicks;
            this.XTotalTicks = xTotalTicks;
            this.XTickStart = xTickStart;
            this.XTickStep = xTickStep;
            this.YColumn = yColumn;
            this.GenerateYAxisTicks = generateYAxisTicks;
            this.YTotalTicks = yTotalTicks;
            this.YTickStart = yTickStart;
            this.YTickStep = yTickStep;
            this.UpperColumn = upperColumn;
            this.MainColumn = mainColumn;
            this.LowerColumn = lowerColumn;
            this.HoverDimension = hoverDimension;
            this.LegendColorizeRows = legendColorizeRows;
            this.LegendHide = legendHide;
            this.LegendOpacity = legendOpacity;
            this.LegendOrientationThreshold = legendOrientationThreshold;
        }

        /// <summary>
        /// Gets or Sets TimeFormat
        /// </summary>
        [DataMember(Name = "timeFormat", EmitDefaultValue = false)]
        public string TimeFormat { get; set; }

        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name = "queries", IsRequired = true, EmitDefaultValue = false)]
        public List<DashboardQuery> Queries { get; set; }

        /// <summary>
        /// Colors define color encoding of data into a visualization
        /// </summary>
        /// <value>Colors define color encoding of data into a visualization</value>
        [DataMember(Name = "colors", IsRequired = true, EmitDefaultValue = false)]
        public List<DashboardColor> Colors { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", IsRequired = true, EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// If true, will display note when empty
        /// </summary>
        /// <value>If true, will display note when empty</value>
        [DataMember(Name = "showNoteWhenEmpty", IsRequired = true, EmitDefaultValue = true)]
        public bool ShowNoteWhenEmpty { get; set; }

        /// <summary>
        /// Gets or Sets Axes
        /// </summary>
        [DataMember(Name = "axes", IsRequired = true, EmitDefaultValue = false)]
        public Axes Axes { get; set; }

        /// <summary>
        /// Gets or Sets StaticLegend
        /// </summary>
        [DataMember(Name = "staticLegend", EmitDefaultValue = false)]
        public StaticLegend StaticLegend { get; set; }

        /// <summary>
        /// Gets or Sets XColumn
        /// </summary>
        [DataMember(Name = "xColumn", EmitDefaultValue = false)]
        public string XColumn { get; set; }

        /// <summary>
        /// Gets or Sets GenerateXAxisTicks
        /// </summary>
        [DataMember(Name = "generateXAxisTicks", EmitDefaultValue = false)]
        public List<string> GenerateXAxisTicks { get; set; }

        /// <summary>
        /// Gets or Sets XTotalTicks
        /// </summary>
        [DataMember(Name = "xTotalTicks", EmitDefaultValue = false)]
        public int XTotalTicks { get; set; }

        /// <summary>
        /// Gets or Sets XTickStart
        /// </summary>
        [DataMember(Name = "xTickStart", EmitDefaultValue = false)]
        public float XTickStart { get; set; }

        /// <summary>
        /// Gets or Sets XTickStep
        /// </summary>
        [DataMember(Name = "xTickStep", EmitDefaultValue = false)]
        public float XTickStep { get; set; }

        /// <summary>
        /// Gets or Sets YColumn
        /// </summary>
        [DataMember(Name = "yColumn", EmitDefaultValue = false)]
        public string YColumn { get; set; }

        /// <summary>
        /// Gets or Sets GenerateYAxisTicks
        /// </summary>
        [DataMember(Name = "generateYAxisTicks", EmitDefaultValue = false)]
        public List<string> GenerateYAxisTicks { get; set; }

        /// <summary>
        /// Gets or Sets YTotalTicks
        /// </summary>
        [DataMember(Name = "yTotalTicks", EmitDefaultValue = false)]
        public int YTotalTicks { get; set; }

        /// <summary>
        /// Gets or Sets YTickStart
        /// </summary>
        [DataMember(Name = "yTickStart", EmitDefaultValue = false)]
        public float YTickStart { get; set; }

        /// <summary>
        /// Gets or Sets YTickStep
        /// </summary>
        [DataMember(Name = "yTickStep", EmitDefaultValue = false)]
        public float YTickStep { get; set; }

        /// <summary>
        /// Gets or Sets UpperColumn
        /// </summary>
        [DataMember(Name = "upperColumn", EmitDefaultValue = false)]
        public string UpperColumn { get; set; }

        /// <summary>
        /// Gets or Sets MainColumn
        /// </summary>
        [DataMember(Name = "mainColumn", EmitDefaultValue = false)]
        public string MainColumn { get; set; }

        /// <summary>
        /// Gets or Sets LowerColumn
        /// </summary>
        [DataMember(Name = "lowerColumn", EmitDefaultValue = false)]
        public string LowerColumn { get; set; }

        /// <summary>
        /// Gets or Sets LegendColorizeRows
        /// </summary>
        [DataMember(Name = "legendColorizeRows", EmitDefaultValue = true)]
        public bool LegendColorizeRows { get; set; }

        /// <summary>
        /// Gets or Sets LegendHide
        /// </summary>
        [DataMember(Name = "legendHide", EmitDefaultValue = true)]
        public bool LegendHide { get; set; }

        /// <summary>
        /// Gets or Sets LegendOpacity
        /// </summary>
        [DataMember(Name = "legendOpacity", EmitDefaultValue = false)]
        public float LegendOpacity { get; set; }

        /// <summary>
        /// Gets or Sets LegendOrientationThreshold
        /// </summary>
        [DataMember(Name = "legendOrientationThreshold", EmitDefaultValue = false)]
        public int LegendOrientationThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BandViewProperties {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  TimeFormat: ").Append(TimeFormat).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  ShowNoteWhenEmpty: ").Append(ShowNoteWhenEmpty).Append("\n");
            sb.Append("  Axes: ").Append(Axes).Append("\n");
            sb.Append("  StaticLegend: ").Append(StaticLegend).Append("\n");
            sb.Append("  XColumn: ").Append(XColumn).Append("\n");
            sb.Append("  GenerateXAxisTicks: ").Append(GenerateXAxisTicks).Append("\n");
            sb.Append("  XTotalTicks: ").Append(XTotalTicks).Append("\n");
            sb.Append("  XTickStart: ").Append(XTickStart).Append("\n");
            sb.Append("  XTickStep: ").Append(XTickStep).Append("\n");
            sb.Append("  YColumn: ").Append(YColumn).Append("\n");
            sb.Append("  GenerateYAxisTicks: ").Append(GenerateYAxisTicks).Append("\n");
            sb.Append("  YTotalTicks: ").Append(YTotalTicks).Append("\n");
            sb.Append("  YTickStart: ").Append(YTickStart).Append("\n");
            sb.Append("  YTickStep: ").Append(YTickStep).Append("\n");
            sb.Append("  UpperColumn: ").Append(UpperColumn).Append("\n");
            sb.Append("  MainColumn: ").Append(MainColumn).Append("\n");
            sb.Append("  LowerColumn: ").Append(LowerColumn).Append("\n");
            sb.Append("  HoverDimension: ").Append(HoverDimension).Append("\n");
            sb.Append("  Geom: ").Append(Geom).Append("\n");
            sb.Append("  LegendColorizeRows: ").Append(LegendColorizeRows).Append("\n");
            sb.Append("  LegendHide: ").Append(LegendHide).Append("\n");
            sb.Append("  LegendOpacity: ").Append(LegendOpacity).Append("\n");
            sb.Append("  LegendOrientationThreshold: ").Append(LegendOrientationThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BandViewProperties);
        }

        /// <summary>
        /// Returns true if BandViewProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of BandViewProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BandViewProperties input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.TimeFormat == input.TimeFormat ||
                    (this.TimeFormat != null &&
                    this.TimeFormat.Equals(input.TimeFormat))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && base.Equals(input) && 
                (
                    this.Queries == input.Queries ||
                    this.Queries != null &&
                    input.Queries != null &&
                    this.Queries.SequenceEqual(input.Queries)
                ) && base.Equals(input) && 
                (
                    this.Colors == input.Colors ||
                    this.Colors != null &&
                    input.Colors != null &&
                    this.Colors.SequenceEqual(input.Colors)
                ) && base.Equals(input) && 
                (
                    this.Shape == input.Shape ||
                    this.Shape.Equals(input.Shape)
                ) && base.Equals(input) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && base.Equals(input) && 
                (
                    this.ShowNoteWhenEmpty == input.ShowNoteWhenEmpty ||
                    this.ShowNoteWhenEmpty.Equals(input.ShowNoteWhenEmpty)
                ) && base.Equals(input) && 
                (
                    this.Axes == input.Axes ||
                    (this.Axes != null &&
                    this.Axes.Equals(input.Axes))
                ) && base.Equals(input) && 
                (
                    this.StaticLegend == input.StaticLegend ||
                    (this.StaticLegend != null &&
                    this.StaticLegend.Equals(input.StaticLegend))
                ) && base.Equals(input) && 
                (
                    this.XColumn == input.XColumn ||
                    (this.XColumn != null &&
                    this.XColumn.Equals(input.XColumn))
                ) && base.Equals(input) && 
                (
                    this.GenerateXAxisTicks == input.GenerateXAxisTicks ||
                    this.GenerateXAxisTicks != null &&
                    input.GenerateXAxisTicks != null &&
                    this.GenerateXAxisTicks.SequenceEqual(input.GenerateXAxisTicks)
                ) && base.Equals(input) && 
                (
                    this.XTotalTicks == input.XTotalTicks ||
                    this.XTotalTicks.Equals(input.XTotalTicks)
                ) && base.Equals(input) && 
                (
                    this.XTickStart == input.XTickStart ||
                    this.XTickStart.Equals(input.XTickStart)
                ) && base.Equals(input) && 
                (
                    this.XTickStep == input.XTickStep ||
                    this.XTickStep.Equals(input.XTickStep)
                ) && base.Equals(input) && 
                (
                    this.YColumn == input.YColumn ||
                    (this.YColumn != null &&
                    this.YColumn.Equals(input.YColumn))
                ) && base.Equals(input) && 
                (
                    this.GenerateYAxisTicks == input.GenerateYAxisTicks ||
                    this.GenerateYAxisTicks != null &&
                    input.GenerateYAxisTicks != null &&
                    this.GenerateYAxisTicks.SequenceEqual(input.GenerateYAxisTicks)
                ) && base.Equals(input) && 
                (
                    this.YTotalTicks == input.YTotalTicks ||
                    this.YTotalTicks.Equals(input.YTotalTicks)
                ) && base.Equals(input) && 
                (
                    this.YTickStart == input.YTickStart ||
                    this.YTickStart.Equals(input.YTickStart)
                ) && base.Equals(input) && 
                (
                    this.YTickStep == input.YTickStep ||
                    this.YTickStep.Equals(input.YTickStep)
                ) && base.Equals(input) && 
                (
                    this.UpperColumn == input.UpperColumn ||
                    (this.UpperColumn != null &&
                    this.UpperColumn.Equals(input.UpperColumn))
                ) && base.Equals(input) && 
                (
                    this.MainColumn == input.MainColumn ||
                    (this.MainColumn != null &&
                    this.MainColumn.Equals(input.MainColumn))
                ) && base.Equals(input) && 
                (
                    this.LowerColumn == input.LowerColumn ||
                    (this.LowerColumn != null &&
                    this.LowerColumn.Equals(input.LowerColumn))
                ) && base.Equals(input) && 
                (
                    this.HoverDimension == input.HoverDimension ||
                    this.HoverDimension.Equals(input.HoverDimension)
                ) && base.Equals(input) && 
                (
                    this.Geom == input.Geom ||
                    this.Geom.Equals(input.Geom)
                ) && base.Equals(input) && 
                (
                    this.LegendColorizeRows == input.LegendColorizeRows ||
                    this.LegendColorizeRows.Equals(input.LegendColorizeRows)
                ) && base.Equals(input) && 
                (
                    this.LegendHide == input.LegendHide ||
                    this.LegendHide.Equals(input.LegendHide)
                ) && base.Equals(input) && 
                (
                    this.LegendOpacity == input.LegendOpacity ||
                    this.LegendOpacity.Equals(input.LegendOpacity)
                ) && base.Equals(input) && 
                (
                    this.LegendOrientationThreshold == input.LegendOrientationThreshold ||
                    this.LegendOrientationThreshold.Equals(input.LegendOrientationThreshold)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.TimeFormat != null)
                    hashCode = hashCode * 59 + this.TimeFormat.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Queries != null)
                    hashCode = hashCode * 59 + this.Queries.GetHashCode();
                if (this.Colors != null)
                    hashCode = hashCode * 59 + this.Colors.GetHashCode();
                hashCode = hashCode * 59 + this.Shape.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                hashCode = hashCode * 59 + this.ShowNoteWhenEmpty.GetHashCode();
                if (this.Axes != null)
                    hashCode = hashCode * 59 + this.Axes.GetHashCode();
                if (this.StaticLegend != null)
                    hashCode = hashCode * 59 + this.StaticLegend.GetHashCode();
                if (this.XColumn != null)
                    hashCode = hashCode * 59 + this.XColumn.GetHashCode();
                if (this.GenerateXAxisTicks != null)
                    hashCode = hashCode * 59 + this.GenerateXAxisTicks.GetHashCode();
                hashCode = hashCode * 59 + this.XTotalTicks.GetHashCode();
                hashCode = hashCode * 59 + this.XTickStart.GetHashCode();
                hashCode = hashCode * 59 + this.XTickStep.GetHashCode();
                if (this.YColumn != null)
                    hashCode = hashCode * 59 + this.YColumn.GetHashCode();
                if (this.GenerateYAxisTicks != null)
                    hashCode = hashCode * 59 + this.GenerateYAxisTicks.GetHashCode();
                hashCode = hashCode * 59 + this.YTotalTicks.GetHashCode();
                hashCode = hashCode * 59 + this.YTickStart.GetHashCode();
                hashCode = hashCode * 59 + this.YTickStep.GetHashCode();
                if (this.UpperColumn != null)
                    hashCode = hashCode * 59 + this.UpperColumn.GetHashCode();
                if (this.MainColumn != null)
                    hashCode = hashCode * 59 + this.MainColumn.GetHashCode();
                if (this.LowerColumn != null)
                    hashCode = hashCode * 59 + this.LowerColumn.GetHashCode();
                hashCode = hashCode * 59 + this.HoverDimension.GetHashCode();
                hashCode = hashCode * 59 + this.Geom.GetHashCode();
                hashCode = hashCode * 59 + this.LegendColorizeRows.GetHashCode();
                hashCode = hashCode * 59 + this.LegendHide.GetHashCode();
                hashCode = hashCode * 59 + this.LegendOpacity.GetHashCode();
                hashCode = hashCode * 59 + this.LegendOrientationThreshold.GetHashCode();
                return hashCode;
            }
        }

    }

}

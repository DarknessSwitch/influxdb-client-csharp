/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// DashboardQuery
    /// </summary>
    [DataContract(Name = "DashboardQuery")]
    public partial class DashboardQuery : IEquatable<DashboardQuery>
    {

        /// <summary>
        /// Gets or Sets EditMode
        /// </summary>
        [DataMember(Name = "editMode", EmitDefaultValue = false)]
        public QueryEditMode? EditMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardQuery" /> class.
        /// </summary>
        /// <param name="text">The text of the Flux query..</param>
        /// <param name="editMode">editMode.</param>
        /// <param name="name">name.</param>
        /// <param name="builderConfig">builderConfig.</param>
        public DashboardQuery(string text = default(string), QueryEditMode? editMode = default(QueryEditMode?), string name = default(string), BuilderConfig builderConfig = default(BuilderConfig))
        {
            this.Text = text;
            this.EditMode = editMode;
            this.Name = name;
            this.BuilderConfig = builderConfig;
        }

        /// <summary>
        /// The text of the Flux query.
        /// </summary>
        /// <value>The text of the Flux query.</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets BuilderConfig
        /// </summary>
        [DataMember(Name = "builderConfig", EmitDefaultValue = false)]
        public BuilderConfig BuilderConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DashboardQuery {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  EditMode: ").Append(EditMode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BuilderConfig: ").Append(BuilderConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DashboardQuery);
        }

        /// <summary>
        /// Returns true if DashboardQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of DashboardQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DashboardQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.EditMode == input.EditMode ||
                    this.EditMode.Equals(input.EditMode)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.BuilderConfig == input.BuilderConfig ||
                    (this.BuilderConfig != null &&
                    this.BuilderConfig.Equals(input.BuilderConfig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                hashCode = hashCode * 59 + this.EditMode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.BuilderConfig != null)
                    hashCode = hashCode * 59 + this.BuilderConfig.GetHashCode();
                return hashCode;
            }
        }

    }

}

/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// ScraperTargetResponses
    /// </summary>
    [DataContract(Name = "ScraperTargetResponses")]
    public partial class ScraperTargetResponses : IEquatable<ScraperTargetResponses>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScraperTargetResponses" /> class.
        /// </summary>
        /// <param name="configurations">configurations.</param>
        public ScraperTargetResponses(List<ScraperTargetResponse> configurations = default(List<ScraperTargetResponse>))
        {
            this.Configurations = configurations;
        }

        /// <summary>
        /// Gets or Sets Configurations
        /// </summary>
        [DataMember(Name = "configurations", EmitDefaultValue = false)]
        public List<ScraperTargetResponse> Configurations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScraperTargetResponses {\n");
            sb.Append("  Configurations: ").Append(Configurations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScraperTargetResponses);
        }

        /// <summary>
        /// Returns true if ScraperTargetResponses instances are equal
        /// </summary>
        /// <param name="input">Instance of ScraperTargetResponses to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScraperTargetResponses input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Configurations == input.Configurations ||
                    this.Configurations != null &&
                    input.Configurations != null &&
                    this.Configurations.SequenceEqual(input.Configurations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Configurations != null)
                    hashCode = hashCode * 59 + this.Configurations.GetHashCode();
                return hashCode;
            }
        }

    }

}

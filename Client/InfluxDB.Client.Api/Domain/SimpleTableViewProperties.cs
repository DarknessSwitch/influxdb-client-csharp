/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// SimpleTableViewProperties
    /// </summary>
    [DataContract(Name = "SimpleTableViewProperties")]
    public partial class SimpleTableViewProperties : ViewProperties, IEquatable<SimpleTableViewProperties>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SimpleTable for value: simple-table
            /// </summary>
            [EnumMember(Value = "simple-table")]
            SimpleTable = 1

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines Shape
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShapeEnum
        {
            /// <summary>
            /// Enum ChronografV2 for value: chronograf-v2
            /// </summary>
            [EnumMember(Value = "chronograf-v2")]
            ChronografV2 = 1

        }


        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name = "shape", IsRequired = true, EmitDefaultValue = false)]
        public ShapeEnum Shape { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleTableViewProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimpleTableViewProperties() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleTableViewProperties" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="showAll">showAll (required).</param>
        /// <param name="queries">queries (required).</param>
        /// <param name="shape">shape (required).</param>
        /// <param name="note">note (required).</param>
        /// <param name="showNoteWhenEmpty">If true, will display note when empty (required).</param>
        public SimpleTableViewProperties(TypeEnum type = default(TypeEnum), bool showAll = default(bool), List<DashboardQuery> queries = default(List<DashboardQuery>), ShapeEnum shape = default(ShapeEnum), string note = default(string), bool showNoteWhenEmpty = default(bool)) : base()
        {
            this.Type = type;
            this.ShowAll = showAll;
            // to ensure "queries" is required (not null)
            if (queries == null) {
                throw new ArgumentNullException("queries is a required property for SimpleTableViewProperties and cannot be null");
            }
            this.Queries = queries;
            this.Shape = shape;
            // to ensure "note" is required (not null)
            if (note == null) {
                throw new ArgumentNullException("note is a required property for SimpleTableViewProperties and cannot be null");
            }
            this.Note = note;
            this.ShowNoteWhenEmpty = showNoteWhenEmpty;
        }

        /// <summary>
        /// Gets or Sets ShowAll
        /// </summary>
        [DataMember(Name = "showAll", IsRequired = true, EmitDefaultValue = true)]
        public bool ShowAll { get; set; }

        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name = "queries", IsRequired = true, EmitDefaultValue = false)]
        public List<DashboardQuery> Queries { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", IsRequired = true, EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// If true, will display note when empty
        /// </summary>
        /// <value>If true, will display note when empty</value>
        [DataMember(Name = "showNoteWhenEmpty", IsRequired = true, EmitDefaultValue = true)]
        public bool ShowNoteWhenEmpty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimpleTableViewProperties {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ShowAll: ").Append(ShowAll).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  ShowNoteWhenEmpty: ").Append(ShowNoteWhenEmpty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimpleTableViewProperties);
        }

        /// <summary>
        /// Returns true if SimpleTableViewProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of SimpleTableViewProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimpleTableViewProperties input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && base.Equals(input) && 
                (
                    this.ShowAll == input.ShowAll ||
                    this.ShowAll.Equals(input.ShowAll)
                ) && base.Equals(input) && 
                (
                    this.Queries == input.Queries ||
                    this.Queries != null &&
                    input.Queries != null &&
                    this.Queries.SequenceEqual(input.Queries)
                ) && base.Equals(input) && 
                (
                    this.Shape == input.Shape ||
                    this.Shape.Equals(input.Shape)
                ) && base.Equals(input) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && base.Equals(input) && 
                (
                    this.ShowNoteWhenEmpty == input.ShowNoteWhenEmpty ||
                    this.ShowNoteWhenEmpty.Equals(input.ShowNoteWhenEmpty)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.ShowAll.GetHashCode();
                if (this.Queries != null)
                    hashCode = hashCode * 59 + this.Queries.GetHashCode();
                hashCode = hashCode * 59 + this.Shape.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                hashCode = hashCode * 59 + this.ShowNoteWhenEmpty.GetHashCode();
                return hashCode;
            }
        }

    }

}

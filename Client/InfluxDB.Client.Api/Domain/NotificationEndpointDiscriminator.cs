/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// NotificationEndpointDiscriminator
    /// </summary>
    [DataContract(Name = "NotificationEndpointDiscriminator")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(TelegramNotificationEndpoint), "telegram")]
    [JsonSubtypes.KnownSubType(typeof(SlackNotificationEndpoint), "slack")]
    [JsonSubtypes.KnownSubType(typeof(PagerDutyNotificationEndpoint), "pagerduty")]
    [JsonSubtypes.KnownSubType(typeof(HTTPNotificationEndpoint), "http")]
    public partial class NotificationEndpointDiscriminator : NotificationEndpointBase, IEquatable<NotificationEndpointDiscriminator>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationEndpointDiscriminator" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotificationEndpointDiscriminator() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationEndpointDiscriminator" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="orgID">orgID.</param>
        /// <param name="userID">userID.</param>
        /// <param name="description">An optional description of the notification endpoint..</param>
        /// <param name="name">name (required).</param>
        /// <param name="status">The status of the endpoint. (default to StatusEnum.Active).</param>
        /// <param name="labels">labels.</param>
        /// <param name="links">links.</param>
        /// <param name="type">type (required).</param>
        public NotificationEndpointDiscriminator(string id = default(string), string orgID = default(string), string userID = default(string), string description = default(string), string name = default(string), StatusEnum? status = StatusEnum.Active, List<Label> labels = default(List<Label>), NotificationEndpointBaseLinks links = default(NotificationEndpointBaseLinks), NotificationEndpointType type = default(NotificationEndpointType)) : base(id, orgID, userID, description, name, status, labels, links, type)
        {
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationEndpointDiscriminator {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationEndpointDiscriminator);
        }

        /// <summary>
        /// Returns true if NotificationEndpointDiscriminator instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationEndpointDiscriminator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationEndpointDiscriminator input)
        {
            if (input == null)
                return false;

            return base.Equals(input);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                return hashCode;
            }
        }

    }

}

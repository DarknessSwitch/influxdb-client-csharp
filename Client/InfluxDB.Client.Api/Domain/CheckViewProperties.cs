/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = InfluxDB.Client.Core.Api.FileParameter;
using OpenAPIDateConverter = InfluxDB.Client.Core.Api.OpenAPIDateConverter;

namespace InfluxDB.Client.Api.Domain
{
    /// <summary>
    /// CheckViewProperties
    /// </summary>
    [DataContract(Name = "CheckViewProperties")]
    public partial class CheckViewProperties : ViewProperties, IEquatable<CheckViewProperties>
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Check for value: check
            /// </summary>
            [EnumMember(Value = "check")]
            Check = 1

        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Defines Shape
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShapeEnum
        {
            /// <summary>
            /// Enum ChronografV2 for value: chronograf-v2
            /// </summary>
            [EnumMember(Value = "chronograf-v2")]
            ChronografV2 = 1

        }


        /// <summary>
        /// Gets or Sets Shape
        /// </summary>
        [DataMember(Name = "shape", IsRequired = true, EmitDefaultValue = false)]
        public ShapeEnum Shape { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckViewProperties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckViewProperties() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckViewProperties" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="shape">shape (required).</param>
        /// <param name="checkID">checkID (required).</param>
        /// <param name="check">check.</param>
        /// <param name="queries">queries (required).</param>
        /// <param name="colors">Colors define color encoding of data into a visualization (required).</param>
        /// <param name="legendColorizeRows">legendColorizeRows.</param>
        /// <param name="legendHide">legendHide.</param>
        /// <param name="legendOpacity">legendOpacity.</param>
        /// <param name="legendOrientationThreshold">legendOrientationThreshold.</param>
        public CheckViewProperties(TypeEnum type = default(TypeEnum), ShapeEnum shape = default(ShapeEnum), string checkID = default(string), Check check = default(Check), List<DashboardQuery> queries = default(List<DashboardQuery>), List<DashboardColor> colors = default(List<DashboardColor>), bool legendColorizeRows = default(bool), bool legendHide = default(bool), float legendOpacity = default(float), int legendOrientationThreshold = default(int)) : base()
        {
            this.Type = type;
            this.Shape = shape;
            // to ensure "checkID" is required (not null)
            if (checkID == null) {
                throw new ArgumentNullException("checkID is a required property for CheckViewProperties and cannot be null");
            }
            this.CheckID = checkID;
            // to ensure "queries" is required (not null)
            if (queries == null) {
                throw new ArgumentNullException("queries is a required property for CheckViewProperties and cannot be null");
            }
            this.Queries = queries;
            // to ensure "colors" is required (not null)
            if (colors == null) {
                throw new ArgumentNullException("colors is a required property for CheckViewProperties and cannot be null");
            }
            this.Colors = colors;
            this.Check = check;
            this.LegendColorizeRows = legendColorizeRows;
            this.LegendHide = legendHide;
            this.LegendOpacity = legendOpacity;
            this.LegendOrientationThreshold = legendOrientationThreshold;
        }

        /// <summary>
        /// Gets or Sets CheckID
        /// </summary>
        [DataMember(Name = "checkID", IsRequired = true, EmitDefaultValue = false)]
        public string CheckID { get; set; }

        /// <summary>
        /// Gets or Sets Check
        /// </summary>
        [DataMember(Name = "check", EmitDefaultValue = false)]
        public Check Check { get; set; }

        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name = "queries", IsRequired = true, EmitDefaultValue = false)]
        public List<DashboardQuery> Queries { get; set; }

        /// <summary>
        /// Colors define color encoding of data into a visualization
        /// </summary>
        /// <value>Colors define color encoding of data into a visualization</value>
        [DataMember(Name = "colors", IsRequired = true, EmitDefaultValue = false)]
        public List<DashboardColor> Colors { get; set; }

        /// <summary>
        /// Gets or Sets LegendColorizeRows
        /// </summary>
        [DataMember(Name = "legendColorizeRows", EmitDefaultValue = true)]
        public bool LegendColorizeRows { get; set; }

        /// <summary>
        /// Gets or Sets LegendHide
        /// </summary>
        [DataMember(Name = "legendHide", EmitDefaultValue = true)]
        public bool LegendHide { get; set; }

        /// <summary>
        /// Gets or Sets LegendOpacity
        /// </summary>
        [DataMember(Name = "legendOpacity", EmitDefaultValue = false)]
        public float LegendOpacity { get; set; }

        /// <summary>
        /// Gets or Sets LegendOrientationThreshold
        /// </summary>
        [DataMember(Name = "legendOrientationThreshold", EmitDefaultValue = false)]
        public int LegendOrientationThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckViewProperties {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Shape: ").Append(Shape).Append("\n");
            sb.Append("  CheckID: ").Append(CheckID).Append("\n");
            sb.Append("  Check: ").Append(Check).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  LegendColorizeRows: ").Append(LegendColorizeRows).Append("\n");
            sb.Append("  LegendHide: ").Append(LegendHide).Append("\n");
            sb.Append("  LegendOpacity: ").Append(LegendOpacity).Append("\n");
            sb.Append("  LegendOrientationThreshold: ").Append(LegendOrientationThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckViewProperties);
        }

        /// <summary>
        /// Returns true if CheckViewProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckViewProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckViewProperties input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && base.Equals(input) && 
                (
                    this.Shape == input.Shape ||
                    this.Shape.Equals(input.Shape)
                ) && base.Equals(input) && 
                (
                    this.CheckID == input.CheckID ||
                    (this.CheckID != null &&
                    this.CheckID.Equals(input.CheckID))
                ) && base.Equals(input) && 
                (
                    this.Check == input.Check ||
                    (this.Check != null &&
                    this.Check.Equals(input.Check))
                ) && base.Equals(input) && 
                (
                    this.Queries == input.Queries ||
                    this.Queries != null &&
                    input.Queries != null &&
                    this.Queries.SequenceEqual(input.Queries)
                ) && base.Equals(input) && 
                (
                    this.Colors == input.Colors ||
                    this.Colors != null &&
                    input.Colors != null &&
                    this.Colors.SequenceEqual(input.Colors)
                ) && base.Equals(input) && 
                (
                    this.LegendColorizeRows == input.LegendColorizeRows ||
                    this.LegendColorizeRows.Equals(input.LegendColorizeRows)
                ) && base.Equals(input) && 
                (
                    this.LegendHide == input.LegendHide ||
                    this.LegendHide.Equals(input.LegendHide)
                ) && base.Equals(input) && 
                (
                    this.LegendOpacity == input.LegendOpacity ||
                    this.LegendOpacity.Equals(input.LegendOpacity)
                ) && base.Equals(input) && 
                (
                    this.LegendOrientationThreshold == input.LegendOrientationThreshold ||
                    this.LegendOrientationThreshold.Equals(input.LegendOrientationThreshold)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Shape.GetHashCode();
                if (this.CheckID != null)
                    hashCode = hashCode * 59 + this.CheckID.GetHashCode();
                if (this.Check != null)
                    hashCode = hashCode * 59 + this.Check.GetHashCode();
                if (this.Queries != null)
                    hashCode = hashCode * 59 + this.Queries.GetHashCode();
                if (this.Colors != null)
                    hashCode = hashCode * 59 + this.Colors.GetHashCode();
                hashCode = hashCode * 59 + this.LegendColorizeRows.GetHashCode();
                hashCode = hashCode * 59 + this.LegendHide.GetHashCode();
                hashCode = hashCode * 59 + this.LegendOpacity.GetHashCode();
                hashCode = hashCode * 59 + this.LegendOrientationThreshold.GetHashCode();
                return hashCode;
            }
        }

    }

}

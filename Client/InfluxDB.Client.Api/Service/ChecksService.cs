/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using InfluxDB.Client.Core.Api;
using InfluxDB.Client.Api.Domain;

namespace InfluxDB.Client.Api.Service
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChecksServiceSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add new check
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="check">Check to create</param>
        /// <returns>Check</returns>
        Check CreateCheck(Check check);

        /// <summary>
        /// Add new check
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="check">Check to create</param>
		/// <returns>RequestOptions</returns>
		RequestOptions CreateCheckWithRequestOptions(Check check);

		/// <summary>
        /// Add new check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="check">Check to create</param>
        /// <returns>ApiResponse of Check</returns>
        ApiResponse<Check> CreateCheckWithHttpInfo(Check check);
        /// <summary>
        /// Delete a check
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteChecksID(string checkID, string zapTraceSpan = default(string));

        /// <summary>
        /// Delete a check
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="checkID">The check ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteChecksIDWithRequestOptions(string checkID, string zapTraceSpan = default(string));

		/// <summary>
        /// Delete a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChecksIDWithHttpInfo(string checkID, string zapTraceSpan = default(string));
        /// <summary>
        /// Delete label from a check
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteChecksIDLabelsID(string checkID, string labelID, string zapTraceSpan = default(string));

        /// <summary>
        /// Delete label from a check
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="checkID">The check ID.</param>
		/// <param name="labelID">The ID of the label to delete.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteChecksIDLabelsIDWithRequestOptions(string checkID, string labelID, string zapTraceSpan = default(string));

		/// <summary>
        /// Delete label from a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChecksIDLabelsIDWithHttpInfo(string checkID, string labelID, string zapTraceSpan = default(string));
        /// <summary>
        /// List all checks
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">Only show checks that belong to a specific organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>Checks</returns>
        Checks GetChecks(string orgID, string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// List all checks
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="orgID">Only show checks that belong to a specific organization ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <param name="offset"> (optional)</param>
		/// <param name="limit"> (optional, default to 20)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetChecksWithRequestOptions(string orgID, string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?));

		/// <summary>
        /// List all checks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">Only show checks that belong to a specific organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>ApiResponse of Checks</returns>
        ApiResponse<Checks> GetChecksWithHttpInfo(string orgID, string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Retrieve a check
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Check</returns>
        Check GetChecksID(string checkID, string zapTraceSpan = default(string));

        /// <summary>
        /// Retrieve a check
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="checkID">The check ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetChecksIDWithRequestOptions(string checkID, string zapTraceSpan = default(string));

		/// <summary>
        /// Retrieve a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Check</returns>
        ApiResponse<Check> GetChecksIDWithHttpInfo(string checkID, string zapTraceSpan = default(string));
        /// <summary>
        /// List all labels for a check
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        LabelsResponse GetChecksIDLabels(string checkID, string zapTraceSpan = default(string));

        /// <summary>
        /// List all labels for a check
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="checkID">The check ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetChecksIDLabelsWithRequestOptions(string checkID, string zapTraceSpan = default(string));

		/// <summary>
        /// List all labels for a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        ApiResponse<LabelsResponse> GetChecksIDLabelsWithHttpInfo(string checkID, string zapTraceSpan = default(string));
        /// <summary>
        /// Retrieve a check query
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>FluxResponse</returns>
        FluxResponse GetChecksIDQuery(string checkID, string zapTraceSpan = default(string));

        /// <summary>
        /// Retrieve a check query
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="checkID">The check ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetChecksIDQueryWithRequestOptions(string checkID, string zapTraceSpan = default(string));

		/// <summary>
        /// Retrieve a check query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of FluxResponse</returns>
        ApiResponse<FluxResponse> GetChecksIDQueryWithHttpInfo(string checkID, string zapTraceSpan = default(string));
        /// <summary>
        /// Update a check
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="checkPatch">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Check</returns>
        Check PatchChecksID(string checkID, CheckPatch checkPatch, string zapTraceSpan = default(string));

        /// <summary>
        /// Update a check
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="checkID">The check ID.</param>
		/// <param name="checkPatch">Check update to apply</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PatchChecksIDWithRequestOptions(string checkID, CheckPatch checkPatch, string zapTraceSpan = default(string));

		/// <summary>
        /// Update a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="checkPatch">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Check</returns>
        ApiResponse<Check> PatchChecksIDWithHttpInfo(string checkID, CheckPatch checkPatch, string zapTraceSpan = default(string));
        /// <summary>
        /// Add a label to a check
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        LabelResponse PostChecksIDLabels(string checkID, LabelMapping labelMapping, string zapTraceSpan = default(string));

        /// <summary>
        /// Add a label to a check
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="checkID">The check ID.</param>
		/// <param name="labelMapping">Label to add</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostChecksIDLabelsWithRequestOptions(string checkID, LabelMapping labelMapping, string zapTraceSpan = default(string));

		/// <summary>
        /// Add a label to a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        ApiResponse<LabelResponse> PostChecksIDLabelsWithHttpInfo(string checkID, LabelMapping labelMapping, string zapTraceSpan = default(string));
        /// <summary>
        /// Update a check
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="check">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Check</returns>
        Check PutChecksID(string checkID, Check check, string zapTraceSpan = default(string));

        /// <summary>
        /// Update a check
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="checkID">The check ID.</param>
		/// <param name="check">Check update to apply</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PutChecksIDWithRequestOptions(string checkID, Check check, string zapTraceSpan = default(string));

		/// <summary>
        /// Update a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="check">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Check</returns>
        ApiResponse<Check> PutChecksIDWithHttpInfo(string checkID, Check check, string zapTraceSpan = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChecksServiceAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add new check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="check">Check to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Check</returns>
        System.Threading.Tasks.Task<Check> CreateCheckAsync(Check check, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add new check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="check">Check to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Check)</returns>
        System.Threading.Tasks.Task<ApiResponse<Check>> CreateCheckWithHttpInfoAsync(Check check, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChecksIDAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChecksIDWithHttpInfoAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete label from a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChecksIDLabelsIDAsync(string checkID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete label from a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChecksIDLabelsIDWithHttpInfoAsync(string checkID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all checks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">Only show checks that belong to a specific organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Checks</returns>
        System.Threading.Tasks.Task<Checks> GetChecksAsync(string orgID, string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all checks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">Only show checks that belong to a specific organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Checks)</returns>
        System.Threading.Tasks.Task<ApiResponse<Checks>> GetChecksWithHttpInfoAsync(string orgID, string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Check</returns>
        System.Threading.Tasks.Task<Check> GetChecksIDAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Check)</returns>
        System.Threading.Tasks.Task<ApiResponse<Check>> GetChecksIDWithHttpInfoAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all labels for a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelsResponse</returns>
        System.Threading.Tasks.Task<LabelsResponse> GetChecksIDLabelsAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all labels for a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelsResponse>> GetChecksIDLabelsWithHttpInfoAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a check query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FluxResponse</returns>
        System.Threading.Tasks.Task<FluxResponse> GetChecksIDQueryAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a check query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FluxResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FluxResponse>> GetChecksIDQueryWithHttpInfoAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="checkPatch">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Check</returns>
        System.Threading.Tasks.Task<Check> PatchChecksIDAsync(string checkID, CheckPatch checkPatch, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="checkPatch">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Check)</returns>
        System.Threading.Tasks.Task<ApiResponse<Check>> PatchChecksIDWithHttpInfoAsync(string checkID, CheckPatch checkPatch, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a label to a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelResponse</returns>
        System.Threading.Tasks.Task<LabelResponse> PostChecksIDLabelsAsync(string checkID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a label to a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelResponse>> PostChecksIDLabelsWithHttpInfoAsync(string checkID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="check">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Check</returns>
        System.Threading.Tasks.Task<Check> PutChecksIDAsync(string checkID, Check check, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="check">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Check)</returns>
        System.Threading.Tasks.Task<ApiResponse<Check>> PutChecksIDWithHttpInfoAsync(string checkID, Check check, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChecksService : IChecksServiceSync, IChecksServiceAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChecksService : IDisposable, IChecksService
    {
        private InfluxDB.Client.Core.Api.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChecksService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public ChecksService() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChecksService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ChecksService(string basePath)
        {
            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChecksService"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ChecksService(InfluxDB.Client.Core.Api.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChecksService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ChecksService(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChecksService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ChecksService(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChecksService"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ChecksService(HttpClient client, InfluxDB.Client.Core.Api.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChecksService"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ChecksService(InfluxDB.Client.Core.Api.ISynchronousClient client, InfluxDB.Client.Core.Api.IAsynchronousClient asyncClient, InfluxDB.Client.Core.Api.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public InfluxDB.Client.Core.Api.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InfluxDB.Client.Core.Api.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InfluxDB.Client.Core.Api.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add new check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="check">Check to create</param>
        /// <returns>Check</returns>
        public Check CreateCheck(Check check)
        {
            InfluxDB.Client.Core.Api.ApiResponse<Check> localVarResponse = CreateCheckWithHttpInfo(check);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="check">Check to create</param>
        /// <returns>ApiResponse of Check</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Check> CreateCheckWithHttpInfo(Check check)
        {
			var localVarRequestOptions = CreateCheckWithRequestOptions(check);

            // make the HTTP request
            var localVarResponse = this.Client.Post<Check>("/api/v2/checks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCheck", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add new check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="check">Check to create</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions CreateCheckWithRequestOptions(Check check)
        {
            // verify the required parameter 'check' is set
            if (check == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'check' when calling ChecksService->CreateCheck");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = check;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Add new check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="check">Check to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Check</returns>
        public async System.Threading.Tasks.Task<Check> CreateCheckAsync(Check check, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Check> localVarResponse = await CreateCheckWithHttpInfoAsync(check, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add new check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="check">Check to create</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Check)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Check>> CreateCheckWithHttpInfoAsync(Check check, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'check' is set
            if (check == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'check' when calling ChecksService->CreateCheck");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = check;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Check>("/api/v2/checks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCheck", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteChecksID(string checkID, string zapTraceSpan = default(string))
        {
            DeleteChecksIDWithHttpInfo(checkID, zapTraceSpan);
        }

        /// <summary>
        /// Delete a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteChecksIDWithHttpInfo(string checkID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteChecksIDWithRequestOptions(checkID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/checks/{checkID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteChecksID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteChecksIDWithRequestOptions(string checkID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->DeleteChecksID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Delete a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChecksIDAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteChecksIDWithHttpInfoAsync(checkID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteChecksIDWithHttpInfoAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->DeleteChecksID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/checks/{checkID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteChecksID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete label from a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteChecksIDLabelsID(string checkID, string labelID, string zapTraceSpan = default(string))
        {
            DeleteChecksIDLabelsIDWithHttpInfo(checkID, labelID, zapTraceSpan);
        }

        /// <summary>
        /// Delete label from a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteChecksIDLabelsIDWithHttpInfo(string checkID, string labelID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteChecksIDLabelsIDWithRequestOptions(checkID, labelID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/checks/{checkID}/labels/{labelID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteChecksIDLabelsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete label from a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteChecksIDLabelsIDWithRequestOptions(string checkID, string labelID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->DeleteChecksIDLabelsID");

            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelID' when calling ChecksService->DeleteChecksIDLabelsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            localVarRequestOptions.PathParameters.Add("labelID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Delete label from a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChecksIDLabelsIDAsync(string checkID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteChecksIDLabelsIDWithHttpInfoAsync(checkID, labelID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete label from a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteChecksIDLabelsIDWithHttpInfoAsync(string checkID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->DeleteChecksIDLabelsID");

            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelID' when calling ChecksService->DeleteChecksIDLabelsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            localVarRequestOptions.PathParameters.Add("labelID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/checks/{checkID}/labels/{labelID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteChecksIDLabelsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all checks 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">Only show checks that belong to a specific organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>Checks</returns>
        public Checks GetChecks(string orgID, string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Checks> localVarResponse = GetChecksWithHttpInfo(orgID, zapTraceSpan, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all checks 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">Only show checks that belong to a specific organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>ApiResponse of Checks</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Checks> GetChecksWithHttpInfo(string orgID, string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?))
        {
			var localVarRequestOptions = GetChecksWithRequestOptions(orgID, zapTraceSpan, offset, limit);

            // make the HTTP request
            var localVarResponse = this.Client.Get<Checks>("/api/v2/checks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChecks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all checks 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">Only show checks that belong to a specific organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetChecksWithRequestOptions(string orgID, string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?))
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'orgID' when calling ChecksService->GetChecks");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all checks 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">Only show checks that belong to a specific organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Checks</returns>
        public async System.Threading.Tasks.Task<Checks> GetChecksAsync(string orgID, string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Checks> localVarResponse = await GetChecksWithHttpInfoAsync(orgID, zapTraceSpan, offset, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all checks 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">Only show checks that belong to a specific organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Checks)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Checks>> GetChecksWithHttpInfoAsync(string orgID, string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'orgID' when calling ChecksService->GetChecks");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Checks>("/api/v2/checks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChecks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Check</returns>
        public Check GetChecksID(string checkID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Check> localVarResponse = GetChecksIDWithHttpInfo(checkID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Check</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Check> GetChecksIDWithHttpInfo(string checkID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetChecksIDWithRequestOptions(checkID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<Check>("/api/v2/checks/{checkID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChecksID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetChecksIDWithRequestOptions(string checkID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->GetChecksID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Retrieve a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Check</returns>
        public async System.Threading.Tasks.Task<Check> GetChecksIDAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Check> localVarResponse = await GetChecksIDWithHttpInfoAsync(checkID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Check)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Check>> GetChecksIDWithHttpInfoAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->GetChecksID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Check>("/api/v2/checks/{checkID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChecksID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all labels for a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        public LabelsResponse GetChecksIDLabels(string checkID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse> localVarResponse = GetChecksIDLabelsWithHttpInfo(checkID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all labels for a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse> GetChecksIDLabelsWithHttpInfo(string checkID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetChecksIDLabelsWithRequestOptions(checkID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<LabelsResponse>("/api/v2/checks/{checkID}/labels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChecksIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all labels for a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetChecksIDLabelsWithRequestOptions(string checkID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->GetChecksIDLabels");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all labels for a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelsResponse</returns>
        public async System.Threading.Tasks.Task<LabelsResponse> GetChecksIDLabelsAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse> localVarResponse = await GetChecksIDLabelsWithHttpInfoAsync(checkID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all labels for a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse>> GetChecksIDLabelsWithHttpInfoAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->GetChecksIDLabels");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LabelsResponse>("/api/v2/checks/{checkID}/labels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChecksIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a check query 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>FluxResponse</returns>
        public FluxResponse GetChecksIDQuery(string checkID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<FluxResponse> localVarResponse = GetChecksIDQueryWithHttpInfo(checkID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a check query 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of FluxResponse</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<FluxResponse> GetChecksIDQueryWithHttpInfo(string checkID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetChecksIDQueryWithRequestOptions(checkID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<FluxResponse>("/api/v2/checks/{checkID}/query", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChecksIDQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a check query 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetChecksIDQueryWithRequestOptions(string checkID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->GetChecksIDQuery");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Retrieve a check query 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FluxResponse</returns>
        public async System.Threading.Tasks.Task<FluxResponse> GetChecksIDQueryAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<FluxResponse> localVarResponse = await GetChecksIDQueryWithHttpInfoAsync(checkID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a check query 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FluxResponse)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<FluxResponse>> GetChecksIDQueryWithHttpInfoAsync(string checkID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->GetChecksIDQuery");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FluxResponse>("/api/v2/checks/{checkID}/query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChecksIDQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="checkPatch">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Check</returns>
        public Check PatchChecksID(string checkID, CheckPatch checkPatch, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Check> localVarResponse = PatchChecksIDWithHttpInfo(checkID, checkPatch, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="checkPatch">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Check</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Check> PatchChecksIDWithHttpInfo(string checkID, CheckPatch checkPatch, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PatchChecksIDWithRequestOptions(checkID, checkPatch, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Check>("/api/v2/checks/{checkID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchChecksID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="checkPatch">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PatchChecksIDWithRequestOptions(string checkID, CheckPatch checkPatch, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->PatchChecksID");

            // verify the required parameter 'checkPatch' is set
            if (checkPatch == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkPatch' when calling ChecksService->PatchChecksID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = checkPatch;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Update a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="checkPatch">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Check</returns>
        public async System.Threading.Tasks.Task<Check> PatchChecksIDAsync(string checkID, CheckPatch checkPatch, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Check> localVarResponse = await PatchChecksIDWithHttpInfoAsync(checkID, checkPatch, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="checkPatch">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Check)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Check>> PatchChecksIDWithHttpInfoAsync(string checkID, CheckPatch checkPatch, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->PatchChecksID");

            // verify the required parameter 'checkPatch' is set
            if (checkPatch == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkPatch' when calling ChecksService->PatchChecksID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = checkPatch;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Check>("/api/v2/checks/{checkID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchChecksID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a label to a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        public LabelResponse PostChecksIDLabels(string checkID, LabelMapping labelMapping, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelResponse> localVarResponse = PostChecksIDLabelsWithHttpInfo(checkID, labelMapping, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a label to a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<LabelResponse> PostChecksIDLabelsWithHttpInfo(string checkID, LabelMapping labelMapping, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostChecksIDLabelsWithRequestOptions(checkID, labelMapping, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<LabelResponse>("/api/v2/checks/{checkID}/labels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostChecksIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a label to a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostChecksIDLabelsWithRequestOptions(string checkID, LabelMapping labelMapping, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->PostChecksIDLabels");

            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelMapping' when calling ChecksService->PostChecksIDLabels");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = labelMapping;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Add a label to a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelResponse</returns>
        public async System.Threading.Tasks.Task<LabelResponse> PostChecksIDLabelsAsync(string checkID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelResponse> localVarResponse = await PostChecksIDLabelsWithHttpInfoAsync(checkID, labelMapping, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a label to a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<LabelResponse>> PostChecksIDLabelsWithHttpInfoAsync(string checkID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->PostChecksIDLabels");

            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelMapping' when calling ChecksService->PostChecksIDLabels");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = labelMapping;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LabelResponse>("/api/v2/checks/{checkID}/labels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostChecksIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="check">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Check</returns>
        public Check PutChecksID(string checkID, Check check, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Check> localVarResponse = PutChecksIDWithHttpInfo(checkID, check, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="check">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Check</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Check> PutChecksIDWithHttpInfo(string checkID, Check check, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PutChecksIDWithRequestOptions(checkID, check, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Put<Check>("/api/v2/checks/{checkID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutChecksID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="check">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PutChecksIDWithRequestOptions(string checkID, Check check, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->PutChecksID");

            // verify the required parameter 'check' is set
            if (check == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'check' when calling ChecksService->PutChecksID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = check;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Update a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="check">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Check</returns>
        public async System.Threading.Tasks.Task<Check> PutChecksIDAsync(string checkID, Check check, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Check> localVarResponse = await PutChecksIDWithHttpInfoAsync(checkID, check, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a check 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkID">The check ID.</param>
        /// <param name="check">Check update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Check)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Check>> PutChecksIDWithHttpInfoAsync(string checkID, Check check, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'checkID' is set
            if (checkID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'checkID' when calling ChecksService->PutChecksID");

            // verify the required parameter 'check' is set
            if (check == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'check' when calling ChecksService->PutChecksID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("checkID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(checkID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = check;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Check>("/api/v2/checks/{checkID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutChecksID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

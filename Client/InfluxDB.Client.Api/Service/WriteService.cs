/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using InfluxDB.Client.Core.Api;
using InfluxDB.Client.Api.Domain;

namespace InfluxDB.Client.Api.Service
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWriteServiceSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Write data
        /// </summary>
        /// <remarks>
        /// Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header.  (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <returns></returns>
        void PostWrite(string org, string bucket, string body, string zapTraceSpan = default(string), string contentEncoding = default(string), string contentType = default(string), int? contentLength = default(int?), string accept = default(string), string orgID = default(string), WritePrecision? precision = default(WritePrecision?));

        /// <summary>
        /// Write data
        /// </summary>
		/// <remarks>
        /// Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
		/// <param name="bucket">The destination bucket for writes.</param>
		/// <param name="body">Data in line protocol format.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header.  (optional, default to identity)</param>
		/// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
		/// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
		/// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
		/// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
		/// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostWriteWithRequestOptions(string org, string bucket, string body, string zapTraceSpan = default(string), string contentEncoding = default(string), string contentType = default(string), int? contentLength = default(int?), string accept = default(string), string orgID = default(string), WritePrecision? precision = default(WritePrecision?));

		/// <summary>
        /// Write data
        /// </summary>
        /// <remarks>
        /// Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header.  (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostWriteWithHttpInfo(string org, string bucket, string body, string zapTraceSpan = default(string), string contentEncoding = default(string), string contentType = default(string), int? contentLength = default(int?), string accept = default(string), string orgID = default(string), WritePrecision? precision = default(WritePrecision?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWriteServiceAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Write data
        /// </summary>
        /// <remarks>
        /// Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header.  (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostWriteAsync(string org, string bucket, string body, string zapTraceSpan = default(string), string contentEncoding = default(string), string contentType = default(string), int? contentLength = default(int?), string accept = default(string), string orgID = default(string), WritePrecision? precision = default(WritePrecision?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Write data
        /// </summary>
        /// <remarks>
        /// Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header.  (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostWriteWithHttpInfoAsync(string org, string bucket, string body, string zapTraceSpan = default(string), string contentEncoding = default(string), string contentType = default(string), int? contentLength = default(int?), string accept = default(string), string orgID = default(string), WritePrecision? precision = default(WritePrecision?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWriteService : IWriteServiceSync, IWriteServiceAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WriteService : IDisposable, IWriteService
    {
        private InfluxDB.Client.Core.Api.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public WriteService() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public WriteService(string basePath)
        {
            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteService"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public WriteService(InfluxDB.Client.Core.Api.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WriteService(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WriteService(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteService"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public WriteService(HttpClient client, InfluxDB.Client.Core.Api.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WriteService"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public WriteService(InfluxDB.Client.Core.Api.ISynchronousClient client, InfluxDB.Client.Core.Api.IAsynchronousClient asyncClient, InfluxDB.Client.Core.Api.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public InfluxDB.Client.Core.Api.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InfluxDB.Client.Core.Api.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InfluxDB.Client.Core.Api.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header.  (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <returns></returns>
        public void PostWrite(string org, string bucket, string body, string zapTraceSpan = default(string), string contentEncoding = default(string), string contentType = default(string), int? contentLength = default(int?), string accept = default(string), string orgID = default(string), WritePrecision? precision = default(WritePrecision?))
        {
            PostWriteWithHttpInfo(org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, orgID, precision);
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header.  (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> PostWriteWithHttpInfo(string org, string bucket, string body, string zapTraceSpan = default(string), string contentEncoding = default(string), string contentType = default(string), int? contentLength = default(int?), string accept = default(string), string orgID = default(string), WritePrecision? precision = default(WritePrecision?))
        {
			var localVarRequestOptions = PostWriteWithRequestOptions(org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, orgID, precision);

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/write", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWrite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header.  (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostWriteWithRequestOptions(string org, string bucket, string body, string zapTraceSpan = default(string), string contentEncoding = default(string), string contentType = default(string), int? contentLength = default(int?), string accept = default(string), string orgID = default(string), WritePrecision? precision = default(WritePrecision?))
        {
            // verify the required parameter 'org' is set
            if (org == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'org' when calling WriteService->PostWrite");

            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'bucket' when calling WriteService->PostWrite");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'body' when calling WriteService->PostWrite");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "org", org));
            if (orgID != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            }
            localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "bucket", bucket));
            if (precision != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "precision", precision));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            if (contentEncoding != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Encoding", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(contentEncoding)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            if (contentLength != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Length", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(contentLength)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(accept)); // header parameter
            }
            localVarRequestOptions.Data = body;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header.  (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostWriteAsync(string org, string bucket, string body, string zapTraceSpan = default(string), string contentEncoding = default(string), string contentType = default(string), int? contentLength = default(int?), string accept = default(string), string orgID = default(string), WritePrecision? precision = default(WritePrecision?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostWriteWithHttpInfoAsync(org, bucket, body, zapTraceSpan, contentEncoding, contentType, contentLength, accept, orgID, precision, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Write data Writes data to a bucket.  To write data into InfluxDB, you need the following:  - **organization name or ID** – _See [View organizations](https://docs.influxdata.com/influxdb/v2.1/organizations/view-orgs/#view-your-organization-id) for instructions on viewing your organization ID._ - **bucket** – _See [View buckets](https://docs.influxdata.com/influxdb/v2.1/organizations/buckets/view-buckets/) for  instructions on viewing your bucket ID._ - **API token** – _See [View tokens](https://docs.influxdata.com/influxdb/v2.1/security/tokens/view-tokens/)  for instructions on viewing your API token._ - **InfluxDB URL** – _See [InfluxDB URLs](https://docs.influxdata.com/influxdb/v2.1/reference/urls/)_. - data in [line protocol](https://docs.influxdata.com/influxdb/v2.1/reference/syntax/line-protocol) format.  InfluxDB Cloud enforces rate and size limits different from InfluxDB OSS. For details, see Responses.  For more information and examples, see the following: - [Write data with the InfluxDB API](https://docs.influxdata.com/influxdb/v2.1/write-data/developer-tools/api). - [Optimize writes to InfluxDB](https://docs.influxdata.com/influxdb/v2.1/write-data/best-practices/optimize-writes/).
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="org">The parameter value specifies the destination organization for writes. The database writes all points in the batch to this organization. If you provide both &#x60;orgID&#x60; and &#x60;org&#x60; parameters, &#x60;org&#x60; takes precedence.</param>
        /// <param name="bucket">The destination bucket for writes.</param>
        /// <param name="body">Data in line protocol format.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="contentEncoding">The value tells InfluxDB what compression is applied to the line protocol in the request payload. To make an API request with a GZIP payload, send &#x60;Content-Encoding: gzip&#x60; as a request header.  (optional, default to identity)</param>
        /// <param name="contentType">The header value indicates the format of the data in the request body. (optional, default to text/plain; charset&#x3D;utf-8)</param>
        /// <param name="contentLength">The header value indicates the size of the entity-body, in bytes, sent to the database. If the length is greater than the database&#39;s &#x60;max body&#x60; configuration option, the server responds with status code &#x60;413&#x60;. (optional)</param>
        /// <param name="accept">The header value specifies the response format. (optional, default to application/json)</param>
        /// <param name="orgID">The parameter value specifies the ID of the destination organization for writes. If both &#x60;orgID&#x60; and &#x60;org&#x60; are specified, &#x60;org&#x60; takes precedence. (optional)</param>
        /// <param name="precision">The precision for the unix timestamps within the body line-protocol. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> PostWriteWithHttpInfoAsync(string org, string bucket, string body, string zapTraceSpan = default(string), string contentEncoding = default(string), string contentType = default(string), int? contentLength = default(int?), string accept = default(string), string orgID = default(string), WritePrecision? precision = default(WritePrecision?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'org' is set
            if (org == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'org' when calling WriteService->PostWrite");

            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'bucket' when calling WriteService->PostWrite");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'body' when calling WriteService->PostWrite");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/plain"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "org", org));
            if (orgID != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            }
            localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "bucket", bucket));
            if (precision != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "precision", precision));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            if (contentEncoding != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Encoding", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(contentEncoding)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            if (contentLength != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Length", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(contentLength)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(accept)); // header parameter
            }
            localVarRequestOptions.Data = body;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/write", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostWrite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

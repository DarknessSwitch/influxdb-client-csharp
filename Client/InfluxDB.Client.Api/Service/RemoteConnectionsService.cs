/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using InfluxDB.Client.Core.Api;
using InfluxDB.Client.Api.Domain;

namespace InfluxDB.Client.Api.Service
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRemoteConnectionsServiceSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a remote connection
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteRemoteConnectionByID(string remoteID, string zapTraceSpan = default(string));

        /// <summary>
        /// Delete a remote connection
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="remoteID"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteRemoteConnectionByIDWithRequestOptions(string remoteID, string zapTraceSpan = default(string));

		/// <summary>
        /// Delete a remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRemoteConnectionByIDWithHttpInfo(string remoteID, string zapTraceSpan = default(string));
        /// <summary>
        /// Retrieve a remote connection
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RemoteConnection</returns>
        RemoteConnection GetRemoteConnectionByID(string remoteID, string zapTraceSpan = default(string));

        /// <summary>
        /// Retrieve a remote connection
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="remoteID"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetRemoteConnectionByIDWithRequestOptions(string remoteID, string zapTraceSpan = default(string));

		/// <summary>
        /// Retrieve a remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of RemoteConnection</returns>
        ApiResponse<RemoteConnection> GetRemoteConnectionByIDWithHttpInfo(string remoteID, string zapTraceSpan = default(string));
        /// <summary>
        /// List all remote connections
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteURL"> (optional)</param>
        /// <returns>RemoteConnections</returns>
        RemoteConnections GetRemoteConnections(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteURL = default(string));

        /// <summary>
        /// List all remote connections
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="orgID">The organization ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <param name="name"> (optional)</param>
		/// <param name="remoteURL"> (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetRemoteConnectionsWithRequestOptions(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteURL = default(string));

		/// <summary>
        /// List all remote connections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteURL"> (optional)</param>
        /// <returns>ApiResponse of RemoteConnections</returns>
        ApiResponse<RemoteConnections> GetRemoteConnectionsWithHttpInfo(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteURL = default(string));
        /// <summary>
        /// Update a remote connection
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="remoteConnectionUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RemoteConnection</returns>
        RemoteConnection PatchRemoteConnectionByID(string remoteID, RemoteConnectionUpdateRequest remoteConnectionUpdateRequest, string zapTraceSpan = default(string));

        /// <summary>
        /// Update a remote connection
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="remoteID"></param>
		/// <param name="remoteConnectionUpdateRequest"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PatchRemoteConnectionByIDWithRequestOptions(string remoteID, RemoteConnectionUpdateRequest remoteConnectionUpdateRequest, string zapTraceSpan = default(string));

		/// <summary>
        /// Update a remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="remoteConnectionUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of RemoteConnection</returns>
        ApiResponse<RemoteConnection> PatchRemoteConnectionByIDWithHttpInfo(string remoteID, RemoteConnectionUpdateRequest remoteConnectionUpdateRequest, string zapTraceSpan = default(string));
        /// <summary>
        /// Register a new remote connection
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteConnectionCreationRequest"></param>
        /// <returns>RemoteConnection</returns>
        RemoteConnection PostRemoteConnection(RemoteConnectionCreationRequest remoteConnectionCreationRequest);

        /// <summary>
        /// Register a new remote connection
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="remoteConnectionCreationRequest"></param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostRemoteConnectionWithRequestOptions(RemoteConnectionCreationRequest remoteConnectionCreationRequest);

		/// <summary>
        /// Register a new remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteConnectionCreationRequest"></param>
        /// <returns>ApiResponse of RemoteConnection</returns>
        ApiResponse<RemoteConnection> PostRemoteConnectionWithHttpInfo(RemoteConnectionCreationRequest remoteConnectionCreationRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRemoteConnectionsServiceAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRemoteConnectionByIDAsync(string remoteID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRemoteConnectionByIDWithHttpInfoAsync(string remoteID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoteConnection</returns>
        System.Threading.Tasks.Task<RemoteConnection> GetRemoteConnectionByIDAsync(string remoteID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoteConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteConnection>> GetRemoteConnectionByIDWithHttpInfoAsync(string remoteID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all remote connections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteURL"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoteConnections</returns>
        System.Threading.Tasks.Task<RemoteConnections> GetRemoteConnectionsAsync(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteURL = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all remote connections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteURL"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoteConnections)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteConnections>> GetRemoteConnectionsWithHttpInfoAsync(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteURL = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="remoteConnectionUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoteConnection</returns>
        System.Threading.Tasks.Task<RemoteConnection> PatchRemoteConnectionByIDAsync(string remoteID, RemoteConnectionUpdateRequest remoteConnectionUpdateRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="remoteConnectionUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoteConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteConnection>> PatchRemoteConnectionByIDWithHttpInfoAsync(string remoteID, RemoteConnectionUpdateRequest remoteConnectionUpdateRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register a new remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteConnectionCreationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoteConnection</returns>
        System.Threading.Tasks.Task<RemoteConnection> PostRemoteConnectionAsync(RemoteConnectionCreationRequest remoteConnectionCreationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register a new remote connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteConnectionCreationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoteConnection)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteConnection>> PostRemoteConnectionWithHttpInfoAsync(RemoteConnectionCreationRequest remoteConnectionCreationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRemoteConnectionsService : IRemoteConnectionsServiceSync, IRemoteConnectionsServiceAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RemoteConnectionsService : IDisposable, IRemoteConnectionsService
    {
        private InfluxDB.Client.Core.Api.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteConnectionsService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public RemoteConnectionsService() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteConnectionsService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public RemoteConnectionsService(string basePath)
        {
            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteConnectionsService"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public RemoteConnectionsService(InfluxDB.Client.Core.Api.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteConnectionsService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public RemoteConnectionsService(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteConnectionsService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public RemoteConnectionsService(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteConnectionsService"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public RemoteConnectionsService(HttpClient client, InfluxDB.Client.Core.Api.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteConnectionsService"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public RemoteConnectionsService(InfluxDB.Client.Core.Api.ISynchronousClient client, InfluxDB.Client.Core.Api.IAsynchronousClient asyncClient, InfluxDB.Client.Core.Api.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public InfluxDB.Client.Core.Api.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InfluxDB.Client.Core.Api.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InfluxDB.Client.Core.Api.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteRemoteConnectionByID(string remoteID, string zapTraceSpan = default(string))
        {
            DeleteRemoteConnectionByIDWithHttpInfo(remoteID, zapTraceSpan);
        }

        /// <summary>
        /// Delete a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteRemoteConnectionByIDWithHttpInfo(string remoteID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteRemoteConnectionByIDWithRequestOptions(remoteID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/remotes/{remoteID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRemoteConnectionByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteRemoteConnectionByIDWithRequestOptions(string remoteID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'remoteID' is set
            if (remoteID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'remoteID' when calling RemoteConnectionsService->DeleteRemoteConnectionByID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("remoteID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(remoteID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Delete a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRemoteConnectionByIDAsync(string remoteID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRemoteConnectionByIDWithHttpInfoAsync(remoteID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteRemoteConnectionByIDWithHttpInfoAsync(string remoteID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'remoteID' is set
            if (remoteID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'remoteID' when calling RemoteConnectionsService->DeleteRemoteConnectionByID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("remoteID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(remoteID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/remotes/{remoteID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRemoteConnectionByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RemoteConnection</returns>
        public RemoteConnection GetRemoteConnectionByID(string remoteID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection> localVarResponse = GetRemoteConnectionByIDWithHttpInfo(remoteID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of RemoteConnection</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection> GetRemoteConnectionByIDWithHttpInfo(string remoteID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetRemoteConnectionByIDWithRequestOptions(remoteID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<RemoteConnection>("/api/v2/remotes/{remoteID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRemoteConnectionByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetRemoteConnectionByIDWithRequestOptions(string remoteID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'remoteID' is set
            if (remoteID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'remoteID' when calling RemoteConnectionsService->GetRemoteConnectionByID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("remoteID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(remoteID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Retrieve a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoteConnection</returns>
        public async System.Threading.Tasks.Task<RemoteConnection> GetRemoteConnectionByIDAsync(string remoteID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection> localVarResponse = await GetRemoteConnectionByIDWithHttpInfoAsync(remoteID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoteConnection)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection>> GetRemoteConnectionByIDWithHttpInfoAsync(string remoteID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'remoteID' is set
            if (remoteID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'remoteID' when calling RemoteConnectionsService->GetRemoteConnectionByID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("remoteID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(remoteID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RemoteConnection>("/api/v2/remotes/{remoteID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRemoteConnectionByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all remote connections 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteURL"> (optional)</param>
        /// <returns>RemoteConnections</returns>
        public RemoteConnections GetRemoteConnections(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteURL = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<RemoteConnections> localVarResponse = GetRemoteConnectionsWithHttpInfo(orgID, zapTraceSpan, name, remoteURL);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all remote connections 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteURL"> (optional)</param>
        /// <returns>ApiResponse of RemoteConnections</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<RemoteConnections> GetRemoteConnectionsWithHttpInfo(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteURL = default(string))
        {
			var localVarRequestOptions = GetRemoteConnectionsWithRequestOptions(orgID, zapTraceSpan, name, remoteURL);

            // make the HTTP request
            var localVarResponse = this.Client.Get<RemoteConnections>("/api/v2/remotes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRemoteConnections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all remote connections 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteURL"> (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetRemoteConnectionsWithRequestOptions(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteURL = default(string))
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'orgID' when calling RemoteConnectionsService->GetRemoteConnections");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (remoteURL != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "remoteURL", remoteURL));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all remote connections 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteURL"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoteConnections</returns>
        public async System.Threading.Tasks.Task<RemoteConnections> GetRemoteConnectionsAsync(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteURL = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<RemoteConnections> localVarResponse = await GetRemoteConnectionsWithHttpInfoAsync(orgID, zapTraceSpan, name, remoteURL, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all remote connections 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteURL"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoteConnections)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<RemoteConnections>> GetRemoteConnectionsWithHttpInfoAsync(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteURL = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'orgID' when calling RemoteConnectionsService->GetRemoteConnections");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (remoteURL != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "remoteURL", remoteURL));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RemoteConnections>("/api/v2/remotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRemoteConnections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="remoteConnectionUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RemoteConnection</returns>
        public RemoteConnection PatchRemoteConnectionByID(string remoteID, RemoteConnectionUpdateRequest remoteConnectionUpdateRequest, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection> localVarResponse = PatchRemoteConnectionByIDWithHttpInfo(remoteID, remoteConnectionUpdateRequest, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="remoteConnectionUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of RemoteConnection</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection> PatchRemoteConnectionByIDWithHttpInfo(string remoteID, RemoteConnectionUpdateRequest remoteConnectionUpdateRequest, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PatchRemoteConnectionByIDWithRequestOptions(remoteID, remoteConnectionUpdateRequest, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Patch<RemoteConnection>("/api/v2/remotes/{remoteID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchRemoteConnectionByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="remoteConnectionUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PatchRemoteConnectionByIDWithRequestOptions(string remoteID, RemoteConnectionUpdateRequest remoteConnectionUpdateRequest, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'remoteID' is set
            if (remoteID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'remoteID' when calling RemoteConnectionsService->PatchRemoteConnectionByID");

            // verify the required parameter 'remoteConnectionUpdateRequest' is set
            if (remoteConnectionUpdateRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'remoteConnectionUpdateRequest' when calling RemoteConnectionsService->PatchRemoteConnectionByID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("remoteID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(remoteID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = remoteConnectionUpdateRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Update a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="remoteConnectionUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoteConnection</returns>
        public async System.Threading.Tasks.Task<RemoteConnection> PatchRemoteConnectionByIDAsync(string remoteID, RemoteConnectionUpdateRequest remoteConnectionUpdateRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection> localVarResponse = await PatchRemoteConnectionByIDWithHttpInfoAsync(remoteID, remoteConnectionUpdateRequest, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteID"></param>
        /// <param name="remoteConnectionUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoteConnection)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection>> PatchRemoteConnectionByIDWithHttpInfoAsync(string remoteID, RemoteConnectionUpdateRequest remoteConnectionUpdateRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'remoteID' is set
            if (remoteID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'remoteID' when calling RemoteConnectionsService->PatchRemoteConnectionByID");

            // verify the required parameter 'remoteConnectionUpdateRequest' is set
            if (remoteConnectionUpdateRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'remoteConnectionUpdateRequest' when calling RemoteConnectionsService->PatchRemoteConnectionByID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("remoteID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(remoteID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = remoteConnectionUpdateRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<RemoteConnection>("/api/v2/remotes/{remoteID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchRemoteConnectionByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteConnectionCreationRequest"></param>
        /// <returns>RemoteConnection</returns>
        public RemoteConnection PostRemoteConnection(RemoteConnectionCreationRequest remoteConnectionCreationRequest)
        {
            InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection> localVarResponse = PostRemoteConnectionWithHttpInfo(remoteConnectionCreationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteConnectionCreationRequest"></param>
        /// <returns>ApiResponse of RemoteConnection</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection> PostRemoteConnectionWithHttpInfo(RemoteConnectionCreationRequest remoteConnectionCreationRequest)
        {
			var localVarRequestOptions = PostRemoteConnectionWithRequestOptions(remoteConnectionCreationRequest);

            // make the HTTP request
            var localVarResponse = this.Client.Post<RemoteConnection>("/api/v2/remotes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRemoteConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteConnectionCreationRequest"></param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostRemoteConnectionWithRequestOptions(RemoteConnectionCreationRequest remoteConnectionCreationRequest)
        {
            // verify the required parameter 'remoteConnectionCreationRequest' is set
            if (remoteConnectionCreationRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'remoteConnectionCreationRequest' when calling RemoteConnectionsService->PostRemoteConnection");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = remoteConnectionCreationRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Register a new remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteConnectionCreationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoteConnection</returns>
        public async System.Threading.Tasks.Task<RemoteConnection> PostRemoteConnectionAsync(RemoteConnectionCreationRequest remoteConnectionCreationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection> localVarResponse = await PostRemoteConnectionWithHttpInfoAsync(remoteConnectionCreationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new remote connection 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="remoteConnectionCreationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoteConnection)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<RemoteConnection>> PostRemoteConnectionWithHttpInfoAsync(RemoteConnectionCreationRequest remoteConnectionCreationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'remoteConnectionCreationRequest' is set
            if (remoteConnectionCreationRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'remoteConnectionCreationRequest' when calling RemoteConnectionsService->PostRemoteConnection");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = remoteConnectionCreationRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RemoteConnection>("/api/v2/remotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostRemoteConnection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using InfluxDB.Client.Core.Api;
using InfluxDB.Client.Api.Domain;

namespace InfluxDB.Client.Api.Service
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplicationsServiceSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a replication
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteReplicationByID(string replicationID, string zapTraceSpan = default(string));

        /// <summary>
        /// Delete a replication
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="replicationID"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteReplicationByIDWithRequestOptions(string replicationID, string zapTraceSpan = default(string));

		/// <summary>
        /// Delete a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReplicationByIDWithHttpInfo(string replicationID, string zapTraceSpan = default(string));
        /// <summary>
        /// Retrieve a replication
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Replication</returns>
        Replication GetReplicationByID(string replicationID, string zapTraceSpan = default(string));

        /// <summary>
        /// Retrieve a replication
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="replicationID"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetReplicationByIDWithRequestOptions(string replicationID, string zapTraceSpan = default(string));

		/// <summary>
        /// Retrieve a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Replication</returns>
        ApiResponse<Replication> GetReplicationByIDWithHttpInfo(string replicationID, string zapTraceSpan = default(string));
        /// <summary>
        /// List all replications
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteID"> (optional)</param>
        /// <param name="localBucketID"> (optional)</param>
        /// <returns>Replications</returns>
        Replications GetReplications(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteID = default(string), string localBucketID = default(string));

        /// <summary>
        /// List all replications
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="orgID">The organization ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <param name="name"> (optional)</param>
		/// <param name="remoteID"> (optional)</param>
		/// <param name="localBucketID"> (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetReplicationsWithRequestOptions(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteID = default(string), string localBucketID = default(string));

		/// <summary>
        /// List all replications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteID"> (optional)</param>
        /// <param name="localBucketID"> (optional)</param>
        /// <returns>ApiResponse of Replications</returns>
        ApiResponse<Replications> GetReplicationsWithHttpInfo(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteID = default(string), string localBucketID = default(string));
        /// <summary>
        /// Update a replication
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="replicationUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the updated information, but don&#39;t save it. (optional, default to false)</param>
        /// <returns>Replication</returns>
        Replication PatchReplicationByID(string replicationID, ReplicationUpdateRequest replicationUpdateRequest, string zapTraceSpan = default(string), bool? validate = default(bool?));

        /// <summary>
        /// Update a replication
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="replicationID"></param>
		/// <param name="replicationUpdateRequest"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <param name="validate">If true, validate the updated information, but don&#39;t save it. (optional, default to false)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PatchReplicationByIDWithRequestOptions(string replicationID, ReplicationUpdateRequest replicationUpdateRequest, string zapTraceSpan = default(string), bool? validate = default(bool?));

		/// <summary>
        /// Update a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="replicationUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the updated information, but don&#39;t save it. (optional, default to false)</param>
        /// <returns>ApiResponse of Replication</returns>
        ApiResponse<Replication> PatchReplicationByIDWithHttpInfo(string replicationID, ReplicationUpdateRequest replicationUpdateRequest, string zapTraceSpan = default(string), bool? validate = default(bool?));
        /// <summary>
        /// Register a new replication
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationCreationRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the replication, but don&#39;t save it. (optional, default to false)</param>
        /// <returns>Replication</returns>
        Replication PostReplication(ReplicationCreationRequest replicationCreationRequest, string zapTraceSpan = default(string), bool? validate = default(bool?));

        /// <summary>
        /// Register a new replication
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="replicationCreationRequest"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <param name="validate">If true, validate the replication, but don&#39;t save it. (optional, default to false)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostReplicationWithRequestOptions(ReplicationCreationRequest replicationCreationRequest, string zapTraceSpan = default(string), bool? validate = default(bool?));

		/// <summary>
        /// Register a new replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationCreationRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the replication, but don&#39;t save it. (optional, default to false)</param>
        /// <returns>ApiResponse of Replication</returns>
        ApiResponse<Replication> PostReplicationWithHttpInfo(ReplicationCreationRequest replicationCreationRequest, string zapTraceSpan = default(string), bool? validate = default(bool?));
        /// <summary>
        /// Validate a replication
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void PostValidateReplicationByID(string replicationID, string zapTraceSpan = default(string));

        /// <summary>
        /// Validate a replication
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="replicationID"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostValidateReplicationByIDWithRequestOptions(string replicationID, string zapTraceSpan = default(string));

		/// <summary>
        /// Validate a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostValidateReplicationByIDWithHttpInfo(string replicationID, string zapTraceSpan = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplicationsServiceAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReplicationByIDAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReplicationByIDWithHttpInfoAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Replication</returns>
        System.Threading.Tasks.Task<Replication> GetReplicationByIDAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Replication)</returns>
        System.Threading.Tasks.Task<ApiResponse<Replication>> GetReplicationByIDWithHttpInfoAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all replications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteID"> (optional)</param>
        /// <param name="localBucketID"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Replications</returns>
        System.Threading.Tasks.Task<Replications> GetReplicationsAsync(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteID = default(string), string localBucketID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all replications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteID"> (optional)</param>
        /// <param name="localBucketID"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Replications)</returns>
        System.Threading.Tasks.Task<ApiResponse<Replications>> GetReplicationsWithHttpInfoAsync(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteID = default(string), string localBucketID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="replicationUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the updated information, but don&#39;t save it. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Replication</returns>
        System.Threading.Tasks.Task<Replication> PatchReplicationByIDAsync(string replicationID, ReplicationUpdateRequest replicationUpdateRequest, string zapTraceSpan = default(string), bool? validate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="replicationUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the updated information, but don&#39;t save it. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Replication)</returns>
        System.Threading.Tasks.Task<ApiResponse<Replication>> PatchReplicationByIDWithHttpInfoAsync(string replicationID, ReplicationUpdateRequest replicationUpdateRequest, string zapTraceSpan = default(string), bool? validate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register a new replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationCreationRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the replication, but don&#39;t save it. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Replication</returns>
        System.Threading.Tasks.Task<Replication> PostReplicationAsync(ReplicationCreationRequest replicationCreationRequest, string zapTraceSpan = default(string), bool? validate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register a new replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationCreationRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the replication, but don&#39;t save it. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Replication)</returns>
        System.Threading.Tasks.Task<ApiResponse<Replication>> PostReplicationWithHttpInfoAsync(ReplicationCreationRequest replicationCreationRequest, string zapTraceSpan = default(string), bool? validate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostValidateReplicationByIDAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate a replication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostValidateReplicationByIDWithHttpInfoAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplicationsService : IReplicationsServiceSync, IReplicationsServiceAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReplicationsService : IDisposable, IReplicationsService
    {
        private InfluxDB.Client.Core.Api.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationsService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public ReplicationsService() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationsService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ReplicationsService(string basePath)
        {
            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationsService"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ReplicationsService(InfluxDB.Client.Core.Api.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationsService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReplicationsService(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationsService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReplicationsService(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationsService"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ReplicationsService(HttpClient client, InfluxDB.Client.Core.Api.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationsService"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ReplicationsService(InfluxDB.Client.Core.Api.ISynchronousClient client, InfluxDB.Client.Core.Api.IAsynchronousClient asyncClient, InfluxDB.Client.Core.Api.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public InfluxDB.Client.Core.Api.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InfluxDB.Client.Core.Api.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InfluxDB.Client.Core.Api.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteReplicationByID(string replicationID, string zapTraceSpan = default(string))
        {
            DeleteReplicationByIDWithHttpInfo(replicationID, zapTraceSpan);
        }

        /// <summary>
        /// Delete a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteReplicationByIDWithHttpInfo(string replicationID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteReplicationByIDWithRequestOptions(replicationID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/replications/{replicationID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplicationByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteReplicationByIDWithRequestOptions(string replicationID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'replicationID' is set
            if (replicationID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationID' when calling ReplicationsService->DeleteReplicationByID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("replicationID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(replicationID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Delete a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReplicationByIDAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteReplicationByIDWithHttpInfoAsync(replicationID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteReplicationByIDWithHttpInfoAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'replicationID' is set
            if (replicationID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationID' when calling ReplicationsService->DeleteReplicationByID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("replicationID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(replicationID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/replications/{replicationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReplicationByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Replication</returns>
        public Replication GetReplicationByID(string replicationID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Replication> localVarResponse = GetReplicationByIDWithHttpInfo(replicationID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Replication</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Replication> GetReplicationByIDWithHttpInfo(string replicationID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetReplicationByIDWithRequestOptions(replicationID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<Replication>("/api/v2/replications/{replicationID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReplicationByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetReplicationByIDWithRequestOptions(string replicationID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'replicationID' is set
            if (replicationID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationID' when calling ReplicationsService->GetReplicationByID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("replicationID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(replicationID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Retrieve a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Replication</returns>
        public async System.Threading.Tasks.Task<Replication> GetReplicationByIDAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Replication> localVarResponse = await GetReplicationByIDWithHttpInfoAsync(replicationID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Replication)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Replication>> GetReplicationByIDWithHttpInfoAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'replicationID' is set
            if (replicationID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationID' when calling ReplicationsService->GetReplicationByID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("replicationID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(replicationID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Replication>("/api/v2/replications/{replicationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReplicationByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all replications 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteID"> (optional)</param>
        /// <param name="localBucketID"> (optional)</param>
        /// <returns>Replications</returns>
        public Replications GetReplications(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteID = default(string), string localBucketID = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Replications> localVarResponse = GetReplicationsWithHttpInfo(orgID, zapTraceSpan, name, remoteID, localBucketID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all replications 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteID"> (optional)</param>
        /// <param name="localBucketID"> (optional)</param>
        /// <returns>ApiResponse of Replications</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Replications> GetReplicationsWithHttpInfo(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteID = default(string), string localBucketID = default(string))
        {
			var localVarRequestOptions = GetReplicationsWithRequestOptions(orgID, zapTraceSpan, name, remoteID, localBucketID);

            // make the HTTP request
            var localVarResponse = this.Client.Get<Replications>("/api/v2/replications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all replications 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteID"> (optional)</param>
        /// <param name="localBucketID"> (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetReplicationsWithRequestOptions(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteID = default(string), string localBucketID = default(string))
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'orgID' when calling ReplicationsService->GetReplications");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (remoteID != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "remoteID", remoteID));
            }
            if (localBucketID != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "localBucketID", localBucketID));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all replications 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteID"> (optional)</param>
        /// <param name="localBucketID"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Replications</returns>
        public async System.Threading.Tasks.Task<Replications> GetReplicationsAsync(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteID = default(string), string localBucketID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Replications> localVarResponse = await GetReplicationsWithHttpInfoAsync(orgID, zapTraceSpan, name, remoteID, localBucketID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all replications 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgID">The organization ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="remoteID"> (optional)</param>
        /// <param name="localBucketID"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Replications)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Replications>> GetReplicationsWithHttpInfoAsync(string orgID, string zapTraceSpan = default(string), string name = default(string), string remoteID = default(string), string localBucketID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orgID' is set
            if (orgID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'orgID' when calling ReplicationsService->GetReplications");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (remoteID != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "remoteID", remoteID));
            }
            if (localBucketID != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "localBucketID", localBucketID));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Replications>("/api/v2/replications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="replicationUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the updated information, but don&#39;t save it. (optional, default to false)</param>
        /// <returns>Replication</returns>
        public Replication PatchReplicationByID(string replicationID, ReplicationUpdateRequest replicationUpdateRequest, string zapTraceSpan = default(string), bool? validate = default(bool?))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Replication> localVarResponse = PatchReplicationByIDWithHttpInfo(replicationID, replicationUpdateRequest, zapTraceSpan, validate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="replicationUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the updated information, but don&#39;t save it. (optional, default to false)</param>
        /// <returns>ApiResponse of Replication</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Replication> PatchReplicationByIDWithHttpInfo(string replicationID, ReplicationUpdateRequest replicationUpdateRequest, string zapTraceSpan = default(string), bool? validate = default(bool?))
        {
			var localVarRequestOptions = PatchReplicationByIDWithRequestOptions(replicationID, replicationUpdateRequest, zapTraceSpan, validate);

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Replication>("/api/v2/replications/{replicationID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchReplicationByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="replicationUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the updated information, but don&#39;t save it. (optional, default to false)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PatchReplicationByIDWithRequestOptions(string replicationID, ReplicationUpdateRequest replicationUpdateRequest, string zapTraceSpan = default(string), bool? validate = default(bool?))
        {
            // verify the required parameter 'replicationID' is set
            if (replicationID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationID' when calling ReplicationsService->PatchReplicationByID");

            // verify the required parameter 'replicationUpdateRequest' is set
            if (replicationUpdateRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationUpdateRequest' when calling ReplicationsService->PatchReplicationByID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("replicationID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(replicationID)); // path parameter
            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = replicationUpdateRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Update a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="replicationUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the updated information, but don&#39;t save it. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Replication</returns>
        public async System.Threading.Tasks.Task<Replication> PatchReplicationByIDAsync(string replicationID, ReplicationUpdateRequest replicationUpdateRequest, string zapTraceSpan = default(string), bool? validate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Replication> localVarResponse = await PatchReplicationByIDWithHttpInfoAsync(replicationID, replicationUpdateRequest, zapTraceSpan, validate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="replicationUpdateRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the updated information, but don&#39;t save it. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Replication)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Replication>> PatchReplicationByIDWithHttpInfoAsync(string replicationID, ReplicationUpdateRequest replicationUpdateRequest, string zapTraceSpan = default(string), bool? validate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'replicationID' is set
            if (replicationID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationID' when calling ReplicationsService->PatchReplicationByID");

            // verify the required parameter 'replicationUpdateRequest' is set
            if (replicationUpdateRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationUpdateRequest' when calling ReplicationsService->PatchReplicationByID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("replicationID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(replicationID)); // path parameter
            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = replicationUpdateRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Replication>("/api/v2/replications/{replicationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchReplicationByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationCreationRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the replication, but don&#39;t save it. (optional, default to false)</param>
        /// <returns>Replication</returns>
        public Replication PostReplication(ReplicationCreationRequest replicationCreationRequest, string zapTraceSpan = default(string), bool? validate = default(bool?))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Replication> localVarResponse = PostReplicationWithHttpInfo(replicationCreationRequest, zapTraceSpan, validate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationCreationRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the replication, but don&#39;t save it. (optional, default to false)</param>
        /// <returns>ApiResponse of Replication</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Replication> PostReplicationWithHttpInfo(ReplicationCreationRequest replicationCreationRequest, string zapTraceSpan = default(string), bool? validate = default(bool?))
        {
			var localVarRequestOptions = PostReplicationWithRequestOptions(replicationCreationRequest, zapTraceSpan, validate);

            // make the HTTP request
            var localVarResponse = this.Client.Post<Replication>("/api/v2/replications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostReplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationCreationRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the replication, but don&#39;t save it. (optional, default to false)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostReplicationWithRequestOptions(ReplicationCreationRequest replicationCreationRequest, string zapTraceSpan = default(string), bool? validate = default(bool?))
        {
            // verify the required parameter 'replicationCreationRequest' is set
            if (replicationCreationRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationCreationRequest' when calling ReplicationsService->PostReplication");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = replicationCreationRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Register a new replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationCreationRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the replication, but don&#39;t save it. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Replication</returns>
        public async System.Threading.Tasks.Task<Replication> PostReplicationAsync(ReplicationCreationRequest replicationCreationRequest, string zapTraceSpan = default(string), bool? validate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Replication> localVarResponse = await PostReplicationWithHttpInfoAsync(replicationCreationRequest, zapTraceSpan, validate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationCreationRequest"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="validate">If true, validate the replication, but don&#39;t save it. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Replication)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Replication>> PostReplicationWithHttpInfoAsync(ReplicationCreationRequest replicationCreationRequest, string zapTraceSpan = default(string), bool? validate = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'replicationCreationRequest' is set
            if (replicationCreationRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationCreationRequest' when calling ReplicationsService->PostReplication");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (validate != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "validate", validate));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = replicationCreationRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Replication>("/api/v2/replications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostReplication", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void PostValidateReplicationByID(string replicationID, string zapTraceSpan = default(string))
        {
            PostValidateReplicationByIDWithHttpInfo(replicationID, zapTraceSpan);
        }

        /// <summary>
        /// Validate a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> PostValidateReplicationByIDWithHttpInfo(string replicationID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostValidateReplicationByIDWithRequestOptions(replicationID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v2/replications/{replicationID}/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostValidateReplicationByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostValidateReplicationByIDWithRequestOptions(string replicationID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'replicationID' is set
            if (replicationID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationID' when calling ReplicationsService->PostValidateReplicationByID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("replicationID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(replicationID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Validate a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostValidateReplicationByIDAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PostValidateReplicationByIDWithHttpInfoAsync(replicationID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validate a replication 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replicationID"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> PostValidateReplicationByIDWithHttpInfoAsync(string replicationID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'replicationID' is set
            if (replicationID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'replicationID' when calling ReplicationsService->PostValidateReplicationByID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("replicationID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(replicationID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v2/replications/{replicationID}/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostValidateReplicationByID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using InfluxDB.Client.Core.Api;
using InfluxDB.Client.Api.Domain;

namespace InfluxDB.Client.Api.Service
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardsServiceSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a dashboard
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteDashboardsID(string dashboardID, string zapTraceSpan = default(string));

        /// <summary>
        /// Delete a dashboard
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteDashboardsIDWithRequestOptions(string dashboardID, string zapTraceSpan = default(string));

		/// <summary>
        /// Delete a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDashboardsIDWithHttpInfo(string dashboardID, string zapTraceSpan = default(string));
        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteDashboardsIDCellsID(string dashboardID, string cellID, string zapTraceSpan = default(string));

        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to delete.</param>
		/// <param name="cellID">The ID of the cell to delete.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteDashboardsIDCellsIDWithRequestOptions(string dashboardID, string cellID, string zapTraceSpan = default(string));

		/// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID, string zapTraceSpan = default(string));
        /// <summary>
        /// Delete a label from a dashboard
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteDashboardsIDLabelsID(string dashboardID, string labelID, string zapTraceSpan = default(string));

        /// <summary>
        /// Delete a label from a dashboard
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="labelID">The ID of the label to delete.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteDashboardsIDLabelsIDWithRequestOptions(string dashboardID, string labelID, string zapTraceSpan = default(string));

		/// <summary>
        /// Delete a label from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDashboardsIDLabelsIDWithHttpInfo(string dashboardID, string labelID, string zapTraceSpan = default(string));
        /// <summary>
        /// Remove a member from a dashboard
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteDashboardsIDMembersID(string userID, string dashboardID, string zapTraceSpan = default(string));

        /// <summary>
        /// Remove a member from a dashboard
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="userID">The ID of the member to remove.</param>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteDashboardsIDMembersIDWithRequestOptions(string userID, string dashboardID, string zapTraceSpan = default(string));

		/// <summary>
        /// Remove a member from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDashboardsIDMembersIDWithHttpInfo(string userID, string dashboardID, string zapTraceSpan = default(string));
        /// <summary>
        /// Remove an owner from a dashboard
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteDashboardsIDOwnersID(string userID, string dashboardID, string zapTraceSpan = default(string));

        /// <summary>
        /// Remove an owner from a dashboard
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="userID">The ID of the owner to remove.</param>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteDashboardsIDOwnersIDWithRequestOptions(string userID, string dashboardID, string zapTraceSpan = default(string));

		/// <summary>
        /// Remove an owner from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDashboardsIDOwnersIDWithHttpInfo(string userID, string dashboardID, string zapTraceSpan = default(string));
        /// <summary>
        /// List all dashboards
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="descending"> (optional, default to false)</param>
        /// <param name="owner">A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)</param>
        /// <param name="sortBy">The column to sort by. (optional)</param>
        /// <param name="id">A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)</param>
        /// <param name="orgID">The identifier of the organization. (optional)</param>
        /// <param name="org">The name of the organization. (optional)</param>
        /// <returns>Dashboards</returns>
        Dashboards GetDashboards(string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), bool? descending = default(bool?), string owner = default(string), string sortBy = default(string), List<string> id = default(List<string>), string orgID = default(string), string org = default(string));

        /// <summary>
        /// List all dashboards
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <param name="offset"> (optional)</param>
		/// <param name="limit"> (optional, default to 20)</param>
		/// <param name="descending"> (optional, default to false)</param>
		/// <param name="owner">A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)</param>
		/// <param name="sortBy">The column to sort by. (optional)</param>
		/// <param name="id">A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)</param>
		/// <param name="orgID">The identifier of the organization. (optional)</param>
		/// <param name="org">The name of the organization. (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetDashboardsWithRequestOptions(string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), bool? descending = default(bool?), string owner = default(string), string sortBy = default(string), List<string> id = default(List<string>), string orgID = default(string), string org = default(string));

		/// <summary>
        /// List all dashboards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="descending"> (optional, default to false)</param>
        /// <param name="owner">A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)</param>
        /// <param name="sortBy">The column to sort by. (optional)</param>
        /// <param name="id">A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)</param>
        /// <param name="orgID">The identifier of the organization. (optional)</param>
        /// <param name="org">The name of the organization. (optional)</param>
        /// <returns>ApiResponse of Dashboards</returns>
        ApiResponse<Dashboards> GetDashboardsWithHttpInfo(string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), bool? descending = default(bool?), string owner = default(string), string sortBy = default(string), List<string> id = default(List<string>), string orgID = default(string), string org = default(string));
        /// <summary>
        /// Retrieve a Dashboard
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="include">Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)</param>
        /// <returns>Dashboard</returns>
        Dashboard GetDashboardsID(string dashboardID, string zapTraceSpan = default(string), string include = default(string));

        /// <summary>
        /// Retrieve a Dashboard
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <param name="include">Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetDashboardsIDWithRequestOptions(string dashboardID, string zapTraceSpan = default(string), string include = default(string));

		/// <summary>
        /// Retrieve a Dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="include">Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        ApiResponse<Dashboard> GetDashboardsIDWithHttpInfo(string dashboardID, string zapTraceSpan = default(string), string include = default(string));
        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        View GetDashboardsIDCellsIDView(string dashboardID, string cellID, string zapTraceSpan = default(string));

        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="cellID">The cell ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetDashboardsIDCellsIDViewWithRequestOptions(string dashboardID, string cellID, string zapTraceSpan = default(string));

		/// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> GetDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID, string zapTraceSpan = default(string));
        /// <summary>
        /// List all labels for a dashboard
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        LabelsResponse GetDashboardsIDLabels(string dashboardID, string zapTraceSpan = default(string));

        /// <summary>
        /// List all labels for a dashboard
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetDashboardsIDLabelsWithRequestOptions(string dashboardID, string zapTraceSpan = default(string));

		/// <summary>
        /// List all labels for a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        ApiResponse<LabelsResponse> GetDashboardsIDLabelsWithHttpInfo(string dashboardID, string zapTraceSpan = default(string));
        /// <summary>
        /// List all dashboard members
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        ResourceMembers GetDashboardsIDMembers(string dashboardID, string zapTraceSpan = default(string));

        /// <summary>
        /// List all dashboard members
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetDashboardsIDMembersWithRequestOptions(string dashboardID, string zapTraceSpan = default(string));

		/// <summary>
        /// List all dashboard members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        ApiResponse<ResourceMembers> GetDashboardsIDMembersWithHttpInfo(string dashboardID, string zapTraceSpan = default(string));
        /// <summary>
        /// List all dashboard owners
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        ResourceOwners GetDashboardsIDOwners(string dashboardID, string zapTraceSpan = default(string));

        /// <summary>
        /// List all dashboard owners
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetDashboardsIDOwnersWithRequestOptions(string dashboardID, string zapTraceSpan = default(string));

		/// <summary>
        /// List all dashboard owners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        ApiResponse<ResourceOwners> GetDashboardsIDOwnersWithHttpInfo(string dashboardID, string zapTraceSpan = default(string));
        /// <summary>
        /// Update a dashboard
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="patchDashboardRequest2"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Dashboard</returns>
        Dashboard PatchDashboardsID(string dashboardID, PatchDashboardRequest2 patchDashboardRequest2, string zapTraceSpan = default(string));

        /// <summary>
        /// Update a dashboard
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="patchDashboardRequest2"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PatchDashboardsIDWithRequestOptions(string dashboardID, PatchDashboardRequest2 patchDashboardRequest2, string zapTraceSpan = default(string));

		/// <summary>
        /// Update a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="patchDashboardRequest2"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        ApiResponse<Dashboard> PatchDashboardsIDWithHttpInfo(string dashboardID, PatchDashboardRequest2 patchDashboardRequest2, string zapTraceSpan = default(string));
        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        Cell PatchDashboardsIDCellsID(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string));

        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
		/// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="cellID">The ID of the cell to update.</param>
		/// <param name="cellUpdate"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PatchDashboardsIDCellsIDWithRequestOptions(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string));

		/// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        ApiResponse<Cell> PatchDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string));
        /// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        View PatchDashboardsIDCellsIDView(string dashboardID, string cellID, View view, string zapTraceSpan = default(string));

        /// <summary>
        /// Update the view for a cell
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="cellID">The ID of the cell to update.</param>
		/// <param name="view"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PatchDashboardsIDCellsIDViewWithRequestOptions(string dashboardID, string cellID, View view, string zapTraceSpan = default(string));

		/// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> PatchDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID, View view, string zapTraceSpan = default(string));
        /// <summary>
        /// Create a dashboard
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDashboardRequest">Dashboard to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Dashboard</returns>
        Dashboard PostDashboards(CreateDashboardRequest createDashboardRequest, string zapTraceSpan = default(string));

        /// <summary>
        /// Create a dashboard
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="createDashboardRequest">Dashboard to create</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostDashboardsWithRequestOptions(CreateDashboardRequest createDashboardRequest, string zapTraceSpan = default(string));

		/// <summary>
        /// Create a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDashboardRequest">Dashboard to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        ApiResponse<Dashboard> PostDashboardsWithHttpInfo(CreateDashboardRequest createDashboardRequest, string zapTraceSpan = default(string));
        /// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        Cell PostDashboardsIDCells(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string));

        /// <summary>
        /// Create a dashboard cell
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="createCell">Cell that will be added</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostDashboardsIDCellsWithRequestOptions(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string));

		/// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        ApiResponse<Cell> PostDashboardsIDCellsWithHttpInfo(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string));
        /// <summary>
        /// Add a label to a dashboard
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        LabelResponse PostDashboardsIDLabels(string dashboardID, LabelMapping labelMapping, string zapTraceSpan = default(string));

        /// <summary>
        /// Add a label to a dashboard
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="labelMapping">Label to add</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostDashboardsIDLabelsWithRequestOptions(string dashboardID, LabelMapping labelMapping, string zapTraceSpan = default(string));

		/// <summary>
        /// Add a label to a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        ApiResponse<LabelResponse> PostDashboardsIDLabelsWithHttpInfo(string dashboardID, LabelMapping labelMapping, string zapTraceSpan = default(string));
        /// <summary>
        /// Add a member to a dashboard
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        ResourceMember PostDashboardsIDMembers(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));

        /// <summary>
        /// Add a member to a dashboard
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="addResourceMemberRequestBody">User to add as member</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostDashboardsIDMembersWithRequestOptions(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));

		/// <summary>
        /// Add a member to a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        ApiResponse<ResourceMember> PostDashboardsIDMembersWithHttpInfo(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));
        /// <summary>
        /// Add an owner to a dashboard
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        ResourceOwner PostDashboardsIDOwners(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));

        /// <summary>
        /// Add an owner to a dashboard
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="addResourceMemberRequestBody">User to add as owner</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostDashboardsIDOwnersWithRequestOptions(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));

		/// <summary>
        /// Add an owner to a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        ApiResponse<ResourceOwner> PostDashboardsIDOwnersWithHttpInfo(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));
        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Dashboard</returns>
        Dashboard PutDashboardsIDCells(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string));

        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
		/// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="cell"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PutDashboardsIDCellsWithRequestOptions(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string));

		/// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        ApiResponse<Dashboard> PutDashboardsIDCellsWithHttpInfo(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardsServiceAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDashboardsIDAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDashboardsIDWithHttpInfoAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDashboardsIDCellsIDAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDashboardsIDCellsIDWithHttpInfoAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a label from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDashboardsIDLabelsIDAsync(string dashboardID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a label from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDashboardsIDLabelsIDWithHttpInfoAsync(string dashboardID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a member from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDashboardsIDMembersIDAsync(string userID, string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a member from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDashboardsIDMembersIDWithHttpInfoAsync(string userID, string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an owner from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDashboardsIDOwnersIDAsync(string userID, string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an owner from a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDashboardsIDOwnersIDWithHttpInfoAsync(string userID, string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all dashboards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="descending"> (optional, default to false)</param>
        /// <param name="owner">A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)</param>
        /// <param name="sortBy">The column to sort by. (optional)</param>
        /// <param name="id">A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)</param>
        /// <param name="orgID">The identifier of the organization. (optional)</param>
        /// <param name="org">The name of the organization. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboards</returns>
        System.Threading.Tasks.Task<Dashboards> GetDashboardsAsync(string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), bool? descending = default(bool?), string owner = default(string), string sortBy = default(string), List<string> id = default(List<string>), string orgID = default(string), string org = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all dashboards
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="descending"> (optional, default to false)</param>
        /// <param name="owner">A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)</param>
        /// <param name="sortBy">The column to sort by. (optional)</param>
        /// <param name="id">A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)</param>
        /// <param name="orgID">The identifier of the organization. (optional)</param>
        /// <param name="org">The name of the organization. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboards)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dashboards>> GetDashboardsWithHttpInfoAsync(string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), bool? descending = default(bool?), string owner = default(string), string sortBy = default(string), List<string> id = default(List<string>), string orgID = default(string), string org = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="include">Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboard</returns>
        System.Threading.Tasks.Task<Dashboard> GetDashboardsIDAsync(string dashboardID, string zapTraceSpan = default(string), string include = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="include">Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dashboard>> GetDashboardsIDWithHttpInfoAsync(string dashboardID, string zapTraceSpan = default(string), string include = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> GetDashboardsIDCellsIDViewAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> GetDashboardsIDCellsIDViewWithHttpInfoAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all labels for a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelsResponse</returns>
        System.Threading.Tasks.Task<LabelsResponse> GetDashboardsIDLabelsAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all labels for a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelsResponse>> GetDashboardsIDLabelsWithHttpInfoAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all dashboard members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceMembers</returns>
        System.Threading.Tasks.Task<ResourceMembers> GetDashboardsIDMembersAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all dashboard members
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> GetDashboardsIDMembersWithHttpInfoAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all dashboard owners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOwners</returns>
        System.Threading.Tasks.Task<ResourceOwners> GetDashboardsIDOwnersAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all dashboard owners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> GetDashboardsIDOwnersWithHttpInfoAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="patchDashboardRequest2"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboard</returns>
        System.Threading.Tasks.Task<Dashboard> PatchDashboardsIDAsync(string dashboardID, PatchDashboardRequest2 patchDashboardRequest2, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="patchDashboardRequest2"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dashboard>> PatchDashboardsIDWithHttpInfoAsync(string dashboardID, PatchDashboardRequest2 patchDashboardRequest2, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cell</returns>
        System.Threading.Tasks.Task<Cell> PatchDashboardsIDCellsIDAsync(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cell>> PatchDashboardsIDCellsIDWithHttpInfoAsync(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> PatchDashboardsIDCellsIDViewAsync(string dashboardID, string cellID, View view, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> PatchDashboardsIDCellsIDViewWithHttpInfoAsync(string dashboardID, string cellID, View view, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDashboardRequest">Dashboard to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboard</returns>
        System.Threading.Tasks.Task<Dashboard> PostDashboardsAsync(CreateDashboardRequest createDashboardRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDashboardRequest">Dashboard to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dashboard>> PostDashboardsWithHttpInfoAsync(CreateDashboardRequest createDashboardRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cell</returns>
        System.Threading.Tasks.Task<Cell> PostDashboardsIDCellsAsync(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cell>> PostDashboardsIDCellsWithHttpInfoAsync(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a label to a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelResponse</returns>
        System.Threading.Tasks.Task<LabelResponse> PostDashboardsIDLabelsAsync(string dashboardID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a label to a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelResponse>> PostDashboardsIDLabelsWithHttpInfoAsync(string dashboardID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a member to a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceMember</returns>
        System.Threading.Tasks.Task<ResourceMember> PostDashboardsIDMembersAsync(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a member to a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMember>> PostDashboardsIDMembersWithHttpInfoAsync(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add an owner to a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOwner</returns>
        System.Threading.Tasks.Task<ResourceOwner> PostDashboardsIDOwnersAsync(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add an owner to a dashboard
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> PostDashboardsIDOwnersWithHttpInfoAsync(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboard</returns>
        System.Threading.Tasks.Task<Dashboard> PutDashboardsIDCellsAsync(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dashboard>> PutDashboardsIDCellsWithHttpInfoAsync(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardsService : IDashboardsServiceSync, IDashboardsServiceAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DashboardsService : IDisposable, IDashboardsService
    {
        private InfluxDB.Client.Core.Api.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public DashboardsService() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DashboardsService(string basePath)
        {
            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsService"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DashboardsService(InfluxDB.Client.Core.Api.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DashboardsService(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DashboardsService(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsService"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DashboardsService(HttpClient client, InfluxDB.Client.Core.Api.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardsService"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DashboardsService(InfluxDB.Client.Core.Api.ISynchronousClient client, InfluxDB.Client.Core.Api.IAsynchronousClient asyncClient, InfluxDB.Client.Core.Api.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public InfluxDB.Client.Core.Api.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InfluxDB.Client.Core.Api.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InfluxDB.Client.Core.Api.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteDashboardsID(string dashboardID, string zapTraceSpan = default(string))
        {
            DeleteDashboardsIDWithHttpInfo(dashboardID, zapTraceSpan);
        }

        /// <summary>
        /// Delete a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteDashboardsIDWithHttpInfo(string dashboardID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteDashboardsIDWithRequestOptions(dashboardID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/dashboards/{dashboardID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteDashboardsIDWithRequestOptions(string dashboardID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->DeleteDashboardsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Delete a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDashboardsIDAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDashboardsIDWithHttpInfoAsync(dashboardID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteDashboardsIDWithHttpInfoAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->DeleteDashboardsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/dashboards/{dashboardID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteDashboardsIDCellsID(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
            DeleteDashboardsIDCellsIDWithHttpInfo(dashboardID, cellID, zapTraceSpan);
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteDashboardsIDCellsIDWithRequestOptions(dashboardID, cellID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/dashboards/{dashboardID}/cells/{cellID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsIDCellsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteDashboardsIDCellsIDWithRequestOptions(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->DeleteDashboardsIDCellsID");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling DashboardsService->DeleteDashboardsIDCellsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDashboardsIDCellsIDAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDashboardsIDCellsIDWithHttpInfoAsync(dashboardID, cellID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteDashboardsIDCellsIDWithHttpInfoAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->DeleteDashboardsIDCellsID");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling DashboardsService->DeleteDashboardsIDCellsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/dashboards/{dashboardID}/cells/{cellID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsIDCellsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a label from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteDashboardsIDLabelsID(string dashboardID, string labelID, string zapTraceSpan = default(string))
        {
            DeleteDashboardsIDLabelsIDWithHttpInfo(dashboardID, labelID, zapTraceSpan);
        }

        /// <summary>
        /// Delete a label from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteDashboardsIDLabelsIDWithHttpInfo(string dashboardID, string labelID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteDashboardsIDLabelsIDWithRequestOptions(dashboardID, labelID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/dashboards/{dashboardID}/labels/{labelID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsIDLabelsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a label from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteDashboardsIDLabelsIDWithRequestOptions(string dashboardID, string labelID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->DeleteDashboardsIDLabelsID");

            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelID' when calling DashboardsService->DeleteDashboardsIDLabelsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("labelID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Delete a label from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDashboardsIDLabelsIDAsync(string dashboardID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDashboardsIDLabelsIDWithHttpInfoAsync(dashboardID, labelID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a label from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelID">The ID of the label to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteDashboardsIDLabelsIDWithHttpInfoAsync(string dashboardID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->DeleteDashboardsIDLabelsID");

            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelID' when calling DashboardsService->DeleteDashboardsIDLabelsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("labelID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/dashboards/{dashboardID}/labels/{labelID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsIDLabelsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a member from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteDashboardsIDMembersID(string userID, string dashboardID, string zapTraceSpan = default(string))
        {
            DeleteDashboardsIDMembersIDWithHttpInfo(userID, dashboardID, zapTraceSpan);
        }

        /// <summary>
        /// Remove a member from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteDashboardsIDMembersIDWithHttpInfo(string userID, string dashboardID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteDashboardsIDMembersIDWithRequestOptions(userID, dashboardID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/dashboards/{dashboardID}/members/{userID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsIDMembersID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a member from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteDashboardsIDMembersIDWithRequestOptions(string userID, string dashboardID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'userID' when calling DashboardsService->DeleteDashboardsIDMembersID");

            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->DeleteDashboardsIDMembersID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Remove a member from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDashboardsIDMembersIDAsync(string userID, string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDashboardsIDMembersIDWithHttpInfoAsync(userID, dashboardID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a member from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteDashboardsIDMembersIDWithHttpInfoAsync(string userID, string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'userID' when calling DashboardsService->DeleteDashboardsIDMembersID");

            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->DeleteDashboardsIDMembersID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/dashboards/{dashboardID}/members/{userID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsIDMembersID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an owner from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteDashboardsIDOwnersID(string userID, string dashboardID, string zapTraceSpan = default(string))
        {
            DeleteDashboardsIDOwnersIDWithHttpInfo(userID, dashboardID, zapTraceSpan);
        }

        /// <summary>
        /// Remove an owner from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteDashboardsIDOwnersIDWithHttpInfo(string userID, string dashboardID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteDashboardsIDOwnersIDWithRequestOptions(userID, dashboardID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/dashboards/{dashboardID}/owners/{userID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsIDOwnersID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an owner from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteDashboardsIDOwnersIDWithRequestOptions(string userID, string dashboardID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'userID' when calling DashboardsService->DeleteDashboardsIDOwnersID");

            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->DeleteDashboardsIDOwnersID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Remove an owner from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDashboardsIDOwnersIDAsync(string userID, string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDashboardsIDOwnersIDWithHttpInfoAsync(userID, dashboardID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an owner from a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteDashboardsIDOwnersIDWithHttpInfoAsync(string userID, string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'userID' when calling DashboardsService->DeleteDashboardsIDOwnersID");

            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->DeleteDashboardsIDOwnersID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/dashboards/{dashboardID}/owners/{userID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsIDOwnersID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all dashboards 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="descending"> (optional, default to false)</param>
        /// <param name="owner">A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)</param>
        /// <param name="sortBy">The column to sort by. (optional)</param>
        /// <param name="id">A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)</param>
        /// <param name="orgID">The identifier of the organization. (optional)</param>
        /// <param name="org">The name of the organization. (optional)</param>
        /// <returns>Dashboards</returns>
        public Dashboards GetDashboards(string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), bool? descending = default(bool?), string owner = default(string), string sortBy = default(string), List<string> id = default(List<string>), string orgID = default(string), string org = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboards> localVarResponse = GetDashboardsWithHttpInfo(zapTraceSpan, offset, limit, descending, owner, sortBy, id, orgID, org);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all dashboards 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="descending"> (optional, default to false)</param>
        /// <param name="owner">A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)</param>
        /// <param name="sortBy">The column to sort by. (optional)</param>
        /// <param name="id">A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)</param>
        /// <param name="orgID">The identifier of the organization. (optional)</param>
        /// <param name="org">The name of the organization. (optional)</param>
        /// <returns>ApiResponse of Dashboards</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Dashboards> GetDashboardsWithHttpInfo(string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), bool? descending = default(bool?), string owner = default(string), string sortBy = default(string), List<string> id = default(List<string>), string orgID = default(string), string org = default(string))
        {
			var localVarRequestOptions = GetDashboardsWithRequestOptions(zapTraceSpan, offset, limit, descending, owner, sortBy, id, orgID, org);

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dashboards>("/api/v2/dashboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all dashboards 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="descending"> (optional, default to false)</param>
        /// <param name="owner">A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)</param>
        /// <param name="sortBy">The column to sort by. (optional)</param>
        /// <param name="id">A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)</param>
        /// <param name="orgID">The identifier of the organization. (optional)</param>
        /// <param name="org">The name of the organization. (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetDashboardsWithRequestOptions(string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), bool? descending = default(bool?), string owner = default(string), string sortBy = default(string), List<string> id = default(List<string>), string orgID = default(string), string org = default(string))
        {
            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (descending != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "descending", descending));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (orgID != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            }
            if (org != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "org", org));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all dashboards 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="descending"> (optional, default to false)</param>
        /// <param name="owner">A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)</param>
        /// <param name="sortBy">The column to sort by. (optional)</param>
        /// <param name="id">A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)</param>
        /// <param name="orgID">The identifier of the organization. (optional)</param>
        /// <param name="org">The name of the organization. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboards</returns>
        public async System.Threading.Tasks.Task<Dashboards> GetDashboardsAsync(string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), bool? descending = default(bool?), string owner = default(string), string sortBy = default(string), List<string> id = default(List<string>), string orgID = default(string), string org = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboards> localVarResponse = await GetDashboardsWithHttpInfoAsync(zapTraceSpan, offset, limit, descending, owner, sortBy, id, orgID, org, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all dashboards 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="descending"> (optional, default to false)</param>
        /// <param name="owner">A user identifier. Returns only dashboards where this user has the &#x60;owner&#x60; role. (optional)</param>
        /// <param name="sortBy">The column to sort by. (optional)</param>
        /// <param name="id">A list of dashboard identifiers. Returns only the listed dashboards. If both &#x60;id&#x60; and &#x60;owner&#x60; are specified, only &#x60;id&#x60; is used. (optional)</param>
        /// <param name="orgID">The identifier of the organization. (optional)</param>
        /// <param name="org">The name of the organization. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboards)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Dashboards>> GetDashboardsWithHttpInfoAsync(string zapTraceSpan = default(string), int? offset = default(int?), int? limit = default(int?), bool? descending = default(bool?), string owner = default(string), string sortBy = default(string), List<string> id = default(List<string>), string orgID = default(string), string org = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (descending != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "descending", descending));
            }
            if (owner != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "owner", owner));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (orgID != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            }
            if (org != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "org", org));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dashboards>("/api/v2/dashboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="include">Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)</param>
        /// <returns>Dashboard</returns>
        public Dashboard GetDashboardsID(string dashboardID, string zapTraceSpan = default(string), string include = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboard> localVarResponse = GetDashboardsIDWithHttpInfo(dashboardID, zapTraceSpan, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="include">Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Dashboard> GetDashboardsIDWithHttpInfo(string dashboardID, string zapTraceSpan = default(string), string include = default(string))
        {
			var localVarRequestOptions = GetDashboardsIDWithRequestOptions(dashboardID, zapTraceSpan, include);

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dashboard>("/api/v2/dashboards/{dashboardID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="include">Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetDashboardsIDWithRequestOptions(string dashboardID, string zapTraceSpan = default(string), string include = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->GetDashboardsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Retrieve a Dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="include">Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboard</returns>
        public async System.Threading.Tasks.Task<Dashboard> GetDashboardsIDAsync(string dashboardID, string zapTraceSpan = default(string), string include = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboard> localVarResponse = await GetDashboardsIDWithHttpInfoAsync(dashboardID, zapTraceSpan, include, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="include">Includes the cell view properties in the response if set to &#x60;properties&#x60; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Dashboard>> GetDashboardsIDWithHttpInfoAsync(string dashboardID, string zapTraceSpan = default(string), string include = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->GetDashboardsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dashboard>("/api/v2/dashboards/{dashboardID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        public View GetDashboardsIDCellsIDView(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<View> localVarResponse = GetDashboardsIDCellsIDViewWithHttpInfo(dashboardID, cellID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<View> GetDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetDashboardsIDCellsIDViewWithRequestOptions(dashboardID, cellID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<View>("/api/v2/dashboards/{dashboardID}/cells/{cellID}/view", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsIDCellsIDView", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetDashboardsIDCellsIDViewWithRequestOptions(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->GetDashboardsIDCellsIDView");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling DashboardsService->GetDashboardsIDCellsIDView");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> GetDashboardsIDCellsIDViewAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<View> localVarResponse = await GetDashboardsIDCellsIDViewWithHttpInfoAsync(dashboardID, cellID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<View>> GetDashboardsIDCellsIDViewWithHttpInfoAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->GetDashboardsIDCellsIDView");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling DashboardsService->GetDashboardsIDCellsIDView");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<View>("/api/v2/dashboards/{dashboardID}/cells/{cellID}/view", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsIDCellsIDView", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all labels for a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        public LabelsResponse GetDashboardsIDLabels(string dashboardID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse> localVarResponse = GetDashboardsIDLabelsWithHttpInfo(dashboardID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all labels for a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse> GetDashboardsIDLabelsWithHttpInfo(string dashboardID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetDashboardsIDLabelsWithRequestOptions(dashboardID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<LabelsResponse>("/api/v2/dashboards/{dashboardID}/labels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all labels for a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetDashboardsIDLabelsWithRequestOptions(string dashboardID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->GetDashboardsIDLabels");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all labels for a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelsResponse</returns>
        public async System.Threading.Tasks.Task<LabelsResponse> GetDashboardsIDLabelsAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse> localVarResponse = await GetDashboardsIDLabelsWithHttpInfoAsync(dashboardID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all labels for a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse>> GetDashboardsIDLabelsWithHttpInfoAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->GetDashboardsIDLabels");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LabelsResponse>("/api/v2/dashboards/{dashboardID}/labels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all dashboard members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        public ResourceMembers GetDashboardsIDMembers(string dashboardID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceMembers> localVarResponse = GetDashboardsIDMembersWithHttpInfo(dashboardID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all dashboard members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<ResourceMembers> GetDashboardsIDMembersWithHttpInfo(string dashboardID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetDashboardsIDMembersWithRequestOptions(dashboardID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceMembers>("/api/v2/dashboards/{dashboardID}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsIDMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all dashboard members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetDashboardsIDMembersWithRequestOptions(string dashboardID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->GetDashboardsIDMembers");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all dashboard members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceMembers</returns>
        public async System.Threading.Tasks.Task<ResourceMembers> GetDashboardsIDMembersAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceMembers> localVarResponse = await GetDashboardsIDMembersWithHttpInfoAsync(dashboardID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all dashboard members 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<ResourceMembers>> GetDashboardsIDMembersWithHttpInfoAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->GetDashboardsIDMembers");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceMembers>("/api/v2/dashboards/{dashboardID}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsIDMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all dashboard owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        public ResourceOwners GetDashboardsIDOwners(string dashboardID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceOwners> localVarResponse = GetDashboardsIDOwnersWithHttpInfo(dashboardID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all dashboard owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<ResourceOwners> GetDashboardsIDOwnersWithHttpInfo(string dashboardID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetDashboardsIDOwnersWithRequestOptions(dashboardID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceOwners>("/api/v2/dashboards/{dashboardID}/owners", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsIDOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all dashboard owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetDashboardsIDOwnersWithRequestOptions(string dashboardID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->GetDashboardsIDOwners");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all dashboard owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOwners</returns>
        public async System.Threading.Tasks.Task<ResourceOwners> GetDashboardsIDOwnersAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceOwners> localVarResponse = await GetDashboardsIDOwnersWithHttpInfoAsync(dashboardID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all dashboard owners 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<ResourceOwners>> GetDashboardsIDOwnersWithHttpInfoAsync(string dashboardID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->GetDashboardsIDOwners");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceOwners>("/api/v2/dashboards/{dashboardID}/owners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsIDOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="patchDashboardRequest2"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Dashboard</returns>
        public Dashboard PatchDashboardsID(string dashboardID, PatchDashboardRequest2 patchDashboardRequest2, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboard> localVarResponse = PatchDashboardsIDWithHttpInfo(dashboardID, patchDashboardRequest2, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="patchDashboardRequest2"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Dashboard> PatchDashboardsIDWithHttpInfo(string dashboardID, PatchDashboardRequest2 patchDashboardRequest2, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PatchDashboardsIDWithRequestOptions(dashboardID, patchDashboardRequest2, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Dashboard>("/api/v2/dashboards/{dashboardID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDashboardsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="patchDashboardRequest2"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PatchDashboardsIDWithRequestOptions(string dashboardID, PatchDashboardRequest2 patchDashboardRequest2, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PatchDashboardsID");

            // verify the required parameter 'patchDashboardRequest2' is set
            if (patchDashboardRequest2 == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'patchDashboardRequest2' when calling DashboardsService->PatchDashboardsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = patchDashboardRequest2;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Update a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="patchDashboardRequest2"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboard</returns>
        public async System.Threading.Tasks.Task<Dashboard> PatchDashboardsIDAsync(string dashboardID, PatchDashboardRequest2 patchDashboardRequest2, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboard> localVarResponse = await PatchDashboardsIDWithHttpInfoAsync(dashboardID, patchDashboardRequest2, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="patchDashboardRequest2"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Dashboard>> PatchDashboardsIDWithHttpInfoAsync(string dashboardID, PatchDashboardRequest2 patchDashboardRequest2, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PatchDashboardsID");

            // verify the required parameter 'patchDashboardRequest2' is set
            if (patchDashboardRequest2 == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'patchDashboardRequest2' when calling DashboardsService->PatchDashboardsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = patchDashboardRequest2;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Dashboard>("/api/v2/dashboards/{dashboardID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDashboardsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        public Cell PatchDashboardsIDCellsID(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Cell> localVarResponse = PatchDashboardsIDCellsIDWithHttpInfo(dashboardID, cellID, cellUpdate, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Cell> PatchDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PatchDashboardsIDCellsIDWithRequestOptions(dashboardID, cellID, cellUpdate, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Cell>("/api/v2/dashboards/{dashboardID}/cells/{cellID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDashboardsIDCellsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PatchDashboardsIDCellsIDWithRequestOptions(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PatchDashboardsIDCellsID");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling DashboardsService->PatchDashboardsIDCellsID");

            // verify the required parameter 'cellUpdate' is set
            if (cellUpdate == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellUpdate' when calling DashboardsService->PatchDashboardsIDCellsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = cellUpdate;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cell</returns>
        public async System.Threading.Tasks.Task<Cell> PatchDashboardsIDCellsIDAsync(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Cell> localVarResponse = await PatchDashboardsIDCellsIDWithHttpInfoAsync(dashboardID, cellID, cellUpdate, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Cell>> PatchDashboardsIDCellsIDWithHttpInfoAsync(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PatchDashboardsIDCellsID");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling DashboardsService->PatchDashboardsIDCellsID");

            // verify the required parameter 'cellUpdate' is set
            if (cellUpdate == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellUpdate' when calling DashboardsService->PatchDashboardsIDCellsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = cellUpdate;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Cell>("/api/v2/dashboards/{dashboardID}/cells/{cellID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDashboardsIDCellsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        public View PatchDashboardsIDCellsIDView(string dashboardID, string cellID, View view, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<View> localVarResponse = PatchDashboardsIDCellsIDViewWithHttpInfo(dashboardID, cellID, view, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<View> PatchDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID, View view, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PatchDashboardsIDCellsIDViewWithRequestOptions(dashboardID, cellID, view, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Patch<View>("/api/v2/dashboards/{dashboardID}/cells/{cellID}/view", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDashboardsIDCellsIDView", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PatchDashboardsIDCellsIDViewWithRequestOptions(string dashboardID, string cellID, View view, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PatchDashboardsIDCellsIDView");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling DashboardsService->PatchDashboardsIDCellsIDView");

            // verify the required parameter 'view' is set
            if (view == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'view' when calling DashboardsService->PatchDashboardsIDCellsIDView");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = view;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> PatchDashboardsIDCellsIDViewAsync(string dashboardID, string cellID, View view, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<View> localVarResponse = await PatchDashboardsIDCellsIDViewWithHttpInfoAsync(dashboardID, cellID, view, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<View>> PatchDashboardsIDCellsIDViewWithHttpInfoAsync(string dashboardID, string cellID, View view, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PatchDashboardsIDCellsIDView");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling DashboardsService->PatchDashboardsIDCellsIDView");

            // verify the required parameter 'view' is set
            if (view == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'view' when calling DashboardsService->PatchDashboardsIDCellsIDView");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = view;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<View>("/api/v2/dashboards/{dashboardID}/cells/{cellID}/view", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDashboardsIDCellsIDView", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDashboardRequest">Dashboard to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Dashboard</returns>
        public Dashboard PostDashboards(CreateDashboardRequest createDashboardRequest, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboard> localVarResponse = PostDashboardsWithHttpInfo(createDashboardRequest, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDashboardRequest">Dashboard to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Dashboard> PostDashboardsWithHttpInfo(CreateDashboardRequest createDashboardRequest, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostDashboardsWithRequestOptions(createDashboardRequest, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<Dashboard>("/api/v2/dashboards", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDashboardRequest">Dashboard to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostDashboardsWithRequestOptions(CreateDashboardRequest createDashboardRequest, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'createDashboardRequest' is set
            if (createDashboardRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'createDashboardRequest' when calling DashboardsService->PostDashboards");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = createDashboardRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Create a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDashboardRequest">Dashboard to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboard</returns>
        public async System.Threading.Tasks.Task<Dashboard> PostDashboardsAsync(CreateDashboardRequest createDashboardRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboard> localVarResponse = await PostDashboardsWithHttpInfoAsync(createDashboardRequest, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDashboardRequest">Dashboard to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Dashboard>> PostDashboardsWithHttpInfoAsync(CreateDashboardRequest createDashboardRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDashboardRequest' is set
            if (createDashboardRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'createDashboardRequest' when calling DashboardsService->PostDashboards");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = createDashboardRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dashboard>("/api/v2/dashboards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboards", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        public Cell PostDashboardsIDCells(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Cell> localVarResponse = PostDashboardsIDCellsWithHttpInfo(dashboardID, createCell, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Cell> PostDashboardsIDCellsWithHttpInfo(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostDashboardsIDCellsWithRequestOptions(dashboardID, createCell, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<Cell>("/api/v2/dashboards/{dashboardID}/cells", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboardsIDCells", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostDashboardsIDCellsWithRequestOptions(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PostDashboardsIDCells");

            // verify the required parameter 'createCell' is set
            if (createCell == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'createCell' when calling DashboardsService->PostDashboardsIDCells");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = createCell;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cell</returns>
        public async System.Threading.Tasks.Task<Cell> PostDashboardsIDCellsAsync(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Cell> localVarResponse = await PostDashboardsIDCellsWithHttpInfoAsync(dashboardID, createCell, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Cell>> PostDashboardsIDCellsWithHttpInfoAsync(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PostDashboardsIDCells");

            // verify the required parameter 'createCell' is set
            if (createCell == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'createCell' when calling DashboardsService->PostDashboardsIDCells");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = createCell;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Cell>("/api/v2/dashboards/{dashboardID}/cells", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboardsIDCells", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a label to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        public LabelResponse PostDashboardsIDLabels(string dashboardID, LabelMapping labelMapping, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelResponse> localVarResponse = PostDashboardsIDLabelsWithHttpInfo(dashboardID, labelMapping, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a label to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<LabelResponse> PostDashboardsIDLabelsWithHttpInfo(string dashboardID, LabelMapping labelMapping, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostDashboardsIDLabelsWithRequestOptions(dashboardID, labelMapping, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<LabelResponse>("/api/v2/dashboards/{dashboardID}/labels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboardsIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a label to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostDashboardsIDLabelsWithRequestOptions(string dashboardID, LabelMapping labelMapping, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PostDashboardsIDLabels");

            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelMapping' when calling DashboardsService->PostDashboardsIDLabels");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = labelMapping;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Add a label to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelResponse</returns>
        public async System.Threading.Tasks.Task<LabelResponse> PostDashboardsIDLabelsAsync(string dashboardID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelResponse> localVarResponse = await PostDashboardsIDLabelsWithHttpInfoAsync(dashboardID, labelMapping, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a label to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<LabelResponse>> PostDashboardsIDLabelsWithHttpInfoAsync(string dashboardID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PostDashboardsIDLabels");

            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelMapping' when calling DashboardsService->PostDashboardsIDLabels");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = labelMapping;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LabelResponse>("/api/v2/dashboards/{dashboardID}/labels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboardsIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a member to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        public ResourceMember PostDashboardsIDMembers(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceMember> localVarResponse = PostDashboardsIDMembersWithHttpInfo(dashboardID, addResourceMemberRequestBody, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a member to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<ResourceMember> PostDashboardsIDMembersWithHttpInfo(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostDashboardsIDMembersWithRequestOptions(dashboardID, addResourceMemberRequestBody, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResourceMember>("/api/v2/dashboards/{dashboardID}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboardsIDMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a member to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostDashboardsIDMembersWithRequestOptions(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PostDashboardsIDMembers");

            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling DashboardsService->PostDashboardsIDMembers");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = addResourceMemberRequestBody;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Add a member to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceMember</returns>
        public async System.Threading.Tasks.Task<ResourceMember> PostDashboardsIDMembersAsync(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceMember> localVarResponse = await PostDashboardsIDMembersWithHttpInfoAsync(dashboardID, addResourceMemberRequestBody, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a member to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<ResourceMember>> PostDashboardsIDMembersWithHttpInfoAsync(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PostDashboardsIDMembers");

            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling DashboardsService->PostDashboardsIDMembers");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = addResourceMemberRequestBody;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceMember>("/api/v2/dashboards/{dashboardID}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboardsIDMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an owner to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        public ResourceOwner PostDashboardsIDOwners(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceOwner> localVarResponse = PostDashboardsIDOwnersWithHttpInfo(dashboardID, addResourceMemberRequestBody, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an owner to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<ResourceOwner> PostDashboardsIDOwnersWithHttpInfo(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostDashboardsIDOwnersWithRequestOptions(dashboardID, addResourceMemberRequestBody, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResourceOwner>("/api/v2/dashboards/{dashboardID}/owners", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboardsIDOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an owner to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostDashboardsIDOwnersWithRequestOptions(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PostDashboardsIDOwners");

            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling DashboardsService->PostDashboardsIDOwners");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = addResourceMemberRequestBody;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Add an owner to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOwner</returns>
        public async System.Threading.Tasks.Task<ResourceOwner> PostDashboardsIDOwnersAsync(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceOwner> localVarResponse = await PostDashboardsIDOwnersWithHttpInfoAsync(dashboardID, addResourceMemberRequestBody, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an owner to a dashboard 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<ResourceOwner>> PostDashboardsIDOwnersWithHttpInfoAsync(string dashboardID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PostDashboardsIDOwners");

            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling DashboardsService->PostDashboardsIDOwners");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = addResourceMemberRequestBody;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceOwner>("/api/v2/dashboards/{dashboardID}/owners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboardsIDOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Dashboard</returns>
        public Dashboard PutDashboardsIDCells(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboard> localVarResponse = PutDashboardsIDCellsWithHttpInfo(dashboardID, cell, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Dashboard> PutDashboardsIDCellsWithHttpInfo(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PutDashboardsIDCellsWithRequestOptions(dashboardID, cell, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Put<Dashboard>("/api/v2/dashboards/{dashboardID}/cells", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutDashboardsIDCells", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PutDashboardsIDCellsWithRequestOptions(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PutDashboardsIDCells");

            // verify the required parameter 'cell' is set
            if (cell == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cell' when calling DashboardsService->PutDashboardsIDCells");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = cell;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboard</returns>
        public async System.Threading.Tasks.Task<Dashboard> PutDashboardsIDCellsAsync(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboard> localVarResponse = await PutDashboardsIDCellsWithHttpInfoAsync(dashboardID, cell, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Dashboard>> PutDashboardsIDCellsWithHttpInfoAsync(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling DashboardsService->PutDashboardsIDCells");

            // verify the required parameter 'cell' is set
            if (cell == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cell' when calling DashboardsService->PutDashboardsIDCells");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = cell;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Dashboard>("/api/v2/dashboards/{dashboardID}/cells", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutDashboardsIDCells", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

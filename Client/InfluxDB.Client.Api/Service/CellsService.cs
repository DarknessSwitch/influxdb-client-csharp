/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using InfluxDB.Client.Core.Api;
using InfluxDB.Client.Api.Domain;

namespace InfluxDB.Client.Api.Service
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsServiceSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteDashboardsIDCellsID(string dashboardID, string cellID, string zapTraceSpan = default(string));

        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to delete.</param>
		/// <param name="cellID">The ID of the cell to delete.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteDashboardsIDCellsIDWithRequestOptions(string dashboardID, string cellID, string zapTraceSpan = default(string));

		/// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID, string zapTraceSpan = default(string));
        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        View GetDashboardsIDCellsIDView(string dashboardID, string cellID, string zapTraceSpan = default(string));

        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="cellID">The cell ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetDashboardsIDCellsIDViewWithRequestOptions(string dashboardID, string cellID, string zapTraceSpan = default(string));

		/// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> GetDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID, string zapTraceSpan = default(string));
        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        Cell PatchDashboardsIDCellsID(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string));

        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
		/// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="cellID">The ID of the cell to update.</param>
		/// <param name="cellUpdate"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PatchDashboardsIDCellsIDWithRequestOptions(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string));

		/// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        ApiResponse<Cell> PatchDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string));
        /// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        View PatchDashboardsIDCellsIDView(string dashboardID, string cellID, View view, string zapTraceSpan = default(string));

        /// <summary>
        /// Update the view for a cell
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="cellID">The ID of the cell to update.</param>
		/// <param name="view"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PatchDashboardsIDCellsIDViewWithRequestOptions(string dashboardID, string cellID, View view, string zapTraceSpan = default(string));

		/// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> PatchDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID, View view, string zapTraceSpan = default(string));
        /// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        Cell PostDashboardsIDCells(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string));

        /// <summary>
        /// Create a dashboard cell
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="createCell">Cell that will be added</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostDashboardsIDCellsWithRequestOptions(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string));

		/// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        ApiResponse<Cell> PostDashboardsIDCellsWithHttpInfo(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string));
        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Dashboard</returns>
        Dashboard PutDashboardsIDCells(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string));

        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
		/// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="cell"></param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PutDashboardsIDCellsWithRequestOptions(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string));

		/// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        ApiResponse<Dashboard> PutDashboardsIDCellsWithHttpInfo(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsServiceAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDashboardsIDCellsIDAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDashboardsIDCellsIDWithHttpInfoAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> GetDashboardsIDCellsIDViewAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> GetDashboardsIDCellsIDViewWithHttpInfoAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cell</returns>
        System.Threading.Tasks.Task<Cell> PatchDashboardsIDCellsIDAsync(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the non-positional information related to a cell
        /// </summary>
        /// <remarks>
        /// Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cell>> PatchDashboardsIDCellsIDWithHttpInfoAsync(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> PatchDashboardsIDCellsIDViewAsync(string dashboardID, string cellID, View view, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the view for a cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> PatchDashboardsIDCellsIDViewWithHttpInfoAsync(string dashboardID, string cellID, View view, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cell</returns>
        System.Threading.Tasks.Task<Cell> PostDashboardsIDCellsAsync(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a dashboard cell
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cell>> PostDashboardsIDCellsWithHttpInfoAsync(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboard</returns>
        System.Threading.Tasks.Task<Dashboard> PutDashboardsIDCellsAsync(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace cells in a dashboard
        /// </summary>
        /// <remarks>
        /// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dashboard>> PutDashboardsIDCellsWithHttpInfoAsync(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICellsService : ICellsServiceSync, ICellsServiceAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CellsService : IDisposable, ICellsService
    {
        private InfluxDB.Client.Core.Api.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public CellsService() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public CellsService(string basePath)
        {
            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsService"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public CellsService(InfluxDB.Client.Core.Api.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CellsService(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CellsService(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsService"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public CellsService(HttpClient client, InfluxDB.Client.Core.Api.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CellsService"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public CellsService(InfluxDB.Client.Core.Api.ISynchronousClient client, InfluxDB.Client.Core.Api.IAsynchronousClient asyncClient, InfluxDB.Client.Core.Api.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public InfluxDB.Client.Core.Api.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InfluxDB.Client.Core.Api.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InfluxDB.Client.Core.Api.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteDashboardsIDCellsID(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
            DeleteDashboardsIDCellsIDWithHttpInfo(dashboardID, cellID, zapTraceSpan);
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteDashboardsIDCellsIDWithRequestOptions(dashboardID, cellID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/dashboards/{dashboardID}/cells/{cellID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsIDCellsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteDashboardsIDCellsIDWithRequestOptions(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->DeleteDashboardsIDCellsID");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling CellsService->DeleteDashboardsIDCellsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDashboardsIDCellsIDAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDashboardsIDCellsIDWithHttpInfoAsync(dashboardID, cellID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to delete.</param>
        /// <param name="cellID">The ID of the cell to delete.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteDashboardsIDCellsIDWithHttpInfoAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->DeleteDashboardsIDCellsID");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling CellsService->DeleteDashboardsIDCellsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/dashboards/{dashboardID}/cells/{cellID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDashboardsIDCellsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        public View GetDashboardsIDCellsIDView(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<View> localVarResponse = GetDashboardsIDCellsIDViewWithHttpInfo(dashboardID, cellID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<View> GetDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetDashboardsIDCellsIDViewWithRequestOptions(dashboardID, cellID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<View>("/api/v2/dashboards/{dashboardID}/cells/{cellID}/view", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsIDCellsIDView", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetDashboardsIDCellsIDViewWithRequestOptions(string dashboardID, string cellID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->GetDashboardsIDCellsIDView");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling CellsService->GetDashboardsIDCellsIDView");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> GetDashboardsIDCellsIDViewAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<View> localVarResponse = await GetDashboardsIDCellsIDViewWithHttpInfoAsync(dashboardID, cellID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The dashboard ID.</param>
        /// <param name="cellID">The cell ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<View>> GetDashboardsIDCellsIDViewWithHttpInfoAsync(string dashboardID, string cellID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->GetDashboardsIDCellsIDView");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling CellsService->GetDashboardsIDCellsIDView");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<View>("/api/v2/dashboards/{dashboardID}/cells/{cellID}/view", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDashboardsIDCellsIDView", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        public Cell PatchDashboardsIDCellsID(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Cell> localVarResponse = PatchDashboardsIDCellsIDWithHttpInfo(dashboardID, cellID, cellUpdate, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Cell> PatchDashboardsIDCellsIDWithHttpInfo(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PatchDashboardsIDCellsIDWithRequestOptions(dashboardID, cellID, cellUpdate, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Cell>("/api/v2/dashboards/{dashboardID}/cells/{cellID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDashboardsIDCellsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PatchDashboardsIDCellsIDWithRequestOptions(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsID");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsID");

            // verify the required parameter 'cellUpdate' is set
            if (cellUpdate == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellUpdate' when calling CellsService->PatchDashboardsIDCellsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = cellUpdate;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cell</returns>
        public async System.Threading.Tasks.Task<Cell> PatchDashboardsIDCellsIDAsync(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Cell> localVarResponse = await PatchDashboardsIDCellsIDWithHttpInfoAsync(dashboardID, cellID, cellUpdate, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the non-positional information related to a cell Updates the non positional information related to a cell. Updates to a single cell&#39;s positional data could cause grid conflicts.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="cellUpdate"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Cell>> PatchDashboardsIDCellsIDWithHttpInfoAsync(string dashboardID, string cellID, CellUpdate cellUpdate, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsID");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsID");

            // verify the required parameter 'cellUpdate' is set
            if (cellUpdate == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellUpdate' when calling CellsService->PatchDashboardsIDCellsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = cellUpdate;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Cell>("/api/v2/dashboards/{dashboardID}/cells/{cellID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDashboardsIDCellsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>View</returns>
        public View PatchDashboardsIDCellsIDView(string dashboardID, string cellID, View view, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<View> localVarResponse = PatchDashboardsIDCellsIDViewWithHttpInfo(dashboardID, cellID, view, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of View</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<View> PatchDashboardsIDCellsIDViewWithHttpInfo(string dashboardID, string cellID, View view, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PatchDashboardsIDCellsIDViewWithRequestOptions(dashboardID, cellID, view, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Patch<View>("/api/v2/dashboards/{dashboardID}/cells/{cellID}/view", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDashboardsIDCellsIDView", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PatchDashboardsIDCellsIDViewWithRequestOptions(string dashboardID, string cellID, View view, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsIDView");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsIDView");

            // verify the required parameter 'view' is set
            if (view == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'view' when calling CellsService->PatchDashboardsIDCellsIDView");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = view;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> PatchDashboardsIDCellsIDViewAsync(string dashboardID, string cellID, View view, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<View> localVarResponse = await PatchDashboardsIDCellsIDViewWithHttpInfoAsync(dashboardID, cellID, view, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the view for a cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cellID">The ID of the cell to update.</param>
        /// <param name="view"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<View>> PatchDashboardsIDCellsIDViewWithHttpInfoAsync(string dashboardID, string cellID, View view, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->PatchDashboardsIDCellsIDView");

            // verify the required parameter 'cellID' is set
            if (cellID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cellID' when calling CellsService->PatchDashboardsIDCellsIDView");

            // verify the required parameter 'view' is set
            if (view == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'view' when calling CellsService->PatchDashboardsIDCellsIDView");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            localVarRequestOptions.PathParameters.Add("cellID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(cellID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = view;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<View>("/api/v2/dashboards/{dashboardID}/cells/{cellID}/view", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDashboardsIDCellsIDView", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Cell</returns>
        public Cell PostDashboardsIDCells(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Cell> localVarResponse = PostDashboardsIDCellsWithHttpInfo(dashboardID, createCell, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Cell</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Cell> PostDashboardsIDCellsWithHttpInfo(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostDashboardsIDCellsWithRequestOptions(dashboardID, createCell, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<Cell>("/api/v2/dashboards/{dashboardID}/cells", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboardsIDCells", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostDashboardsIDCellsWithRequestOptions(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->PostDashboardsIDCells");

            // verify the required parameter 'createCell' is set
            if (createCell == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'createCell' when calling CellsService->PostDashboardsIDCells");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = createCell;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Cell</returns>
        public async System.Threading.Tasks.Task<Cell> PostDashboardsIDCellsAsync(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Cell> localVarResponse = await PostDashboardsIDCellsWithHttpInfoAsync(dashboardID, createCell, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a dashboard cell 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="createCell">Cell that will be added</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Cell)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Cell>> PostDashboardsIDCellsWithHttpInfoAsync(string dashboardID, CreateCell createCell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->PostDashboardsIDCells");

            // verify the required parameter 'createCell' is set
            if (createCell == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'createCell' when calling CellsService->PostDashboardsIDCells");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = createCell;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Cell>("/api/v2/dashboards/{dashboardID}/cells", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDashboardsIDCells", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Dashboard</returns>
        public Dashboard PutDashboardsIDCells(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboard> localVarResponse = PutDashboardsIDCellsWithHttpInfo(dashboardID, cell, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Dashboard</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Dashboard> PutDashboardsIDCellsWithHttpInfo(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PutDashboardsIDCellsWithRequestOptions(dashboardID, cell, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Put<Dashboard>("/api/v2/dashboards/{dashboardID}/cells", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutDashboardsIDCells", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PutDashboardsIDCellsWithRequestOptions(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->PutDashboardsIDCells");

            // verify the required parameter 'cell' is set
            if (cell == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cell' when calling CellsService->PutDashboardsIDCells");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = cell;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dashboard</returns>
        public async System.Threading.Tasks.Task<Dashboard> PutDashboardsIDCellsAsync(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Dashboard> localVarResponse = await PutDashboardsIDCellsWithHttpInfoAsync(dashboardID, cell, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace cells in a dashboard Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dashboardID">The ID of the dashboard to update.</param>
        /// <param name="cell"></param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dashboard)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Dashboard>> PutDashboardsIDCellsWithHttpInfoAsync(string dashboardID, List<Cell> cell, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'dashboardID' is set
            if (dashboardID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'dashboardID' when calling CellsService->PutDashboardsIDCells");

            // verify the required parameter 'cell' is set
            if (cell == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'cell' when calling CellsService->PutDashboardsIDCells");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("dashboardID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(dashboardID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = cell;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Dashboard>("/api/v2/dashboards/{dashboardID}/cells", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutDashboardsIDCells", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}

/*
 * InfluxDB OSS API Service
 *
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using InfluxDB.Client.Core.Api;
using InfluxDB.Client.Api.Domain;

namespace InfluxDB.Client.Api.Service
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITelegrafsServiceSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Telegraf configuration
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteTelegrafsID(string telegrafID, string zapTraceSpan = default(string));

        /// <summary>
        /// Delete a Telegraf configuration
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="telegrafID">The Telegraf configuration ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteTelegrafsIDWithRequestOptions(string telegrafID, string zapTraceSpan = default(string));

		/// <summary>
        /// Delete a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTelegrafsIDWithHttpInfo(string telegrafID, string zapTraceSpan = default(string));
        /// <summary>
        /// Delete a label from a Telegraf config
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelID">The label ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteTelegrafsIDLabelsID(string telegrafID, string labelID, string zapTraceSpan = default(string));

        /// <summary>
        /// Delete a label from a Telegraf config
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="labelID">The label ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteTelegrafsIDLabelsIDWithRequestOptions(string telegrafID, string labelID, string zapTraceSpan = default(string));

		/// <summary>
        /// Delete a label from a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelID">The label ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTelegrafsIDLabelsIDWithHttpInfo(string telegrafID, string labelID, string zapTraceSpan = default(string));
        /// <summary>
        /// Remove a member from a Telegraf config
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteTelegrafsIDMembersID(string userID, string telegrafID, string zapTraceSpan = default(string));

        /// <summary>
        /// Remove a member from a Telegraf config
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="userID">The ID of the member to remove.</param>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteTelegrafsIDMembersIDWithRequestOptions(string userID, string telegrafID, string zapTraceSpan = default(string));

		/// <summary>
        /// Remove a member from a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTelegrafsIDMembersIDWithHttpInfo(string userID, string telegrafID, string zapTraceSpan = default(string));
        /// <summary>
        /// Remove an owner from a Telegraf config
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        void DeleteTelegrafsIDOwnersID(string userID, string telegrafID, string zapTraceSpan = default(string));

        /// <summary>
        /// Remove an owner from a Telegraf config
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="userID">The ID of the owner to remove.</param>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions DeleteTelegrafsIDOwnersIDWithRequestOptions(string userID, string telegrafID, string zapTraceSpan = default(string));

		/// <summary>
        /// Remove an owner from a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTelegrafsIDOwnersIDWithHttpInfo(string userID, string telegrafID, string zapTraceSpan = default(string));
        /// <summary>
        /// List all Telegraf configurations
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">The organization ID the Telegraf config belongs to. (optional)</param>
        /// <returns>Telegrafs</returns>
        Telegrafs GetTelegrafs(string zapTraceSpan = default(string), string orgID = default(string));

        /// <summary>
        /// List all Telegraf configurations
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <param name="orgID">The organization ID the Telegraf config belongs to. (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetTelegrafsWithRequestOptions(string zapTraceSpan = default(string), string orgID = default(string));

		/// <summary>
        /// List all Telegraf configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">The organization ID the Telegraf config belongs to. (optional)</param>
        /// <returns>ApiResponse of Telegrafs</returns>
        ApiResponse<Telegrafs> GetTelegrafsWithHttpInfo(string zapTraceSpan = default(string), string orgID = default(string));
        /// <summary>
        /// Retrieve a Telegraf configuration
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="accept"> (optional, default to application/toml)</param>
        /// <returns>string</returns>
        string GetTelegrafsID(string telegrafID, string zapTraceSpan = default(string), string accept = default(string));

        /// <summary>
        /// Retrieve a Telegraf configuration
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="telegrafID">The Telegraf configuration ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <param name="accept"> (optional, default to application/toml)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetTelegrafsIDWithRequestOptions(string telegrafID, string zapTraceSpan = default(string), string accept = default(string));

		/// <summary>
        /// Retrieve a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="accept"> (optional, default to application/toml)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetTelegrafsIDWithHttpInfo(string telegrafID, string zapTraceSpan = default(string), string accept = default(string));
        /// <summary>
        /// List all labels for a Telegraf config
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        LabelsResponse GetTelegrafsIDLabels(string telegrafID, string zapTraceSpan = default(string));

        /// <summary>
        /// List all labels for a Telegraf config
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetTelegrafsIDLabelsWithRequestOptions(string telegrafID, string zapTraceSpan = default(string));

		/// <summary>
        /// List all labels for a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        ApiResponse<LabelsResponse> GetTelegrafsIDLabelsWithHttpInfo(string telegrafID, string zapTraceSpan = default(string));
        /// <summary>
        /// List all users with member privileges for a Telegraf config
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        ResourceMembers GetTelegrafsIDMembers(string telegrafID, string zapTraceSpan = default(string));

        /// <summary>
        /// List all users with member privileges for a Telegraf config
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetTelegrafsIDMembersWithRequestOptions(string telegrafID, string zapTraceSpan = default(string));

		/// <summary>
        /// List all users with member privileges for a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        ApiResponse<ResourceMembers> GetTelegrafsIDMembersWithHttpInfo(string telegrafID, string zapTraceSpan = default(string));
        /// <summary>
        /// List all owners of a Telegraf configuration
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        ResourceOwners GetTelegrafsIDOwners(string telegrafID, string zapTraceSpan = default(string));

        /// <summary>
        /// List all owners of a Telegraf configuration
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="telegrafID">The Telegraf configuration ID.</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions GetTelegrafsIDOwnersWithRequestOptions(string telegrafID, string zapTraceSpan = default(string));

		/// <summary>
        /// List all owners of a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        ApiResponse<ResourceOwners> GetTelegrafsIDOwnersWithHttpInfo(string telegrafID, string zapTraceSpan = default(string));
        /// <summary>
        /// Create a Telegraf configuration
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafPluginRequest">Telegraf configuration to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Telegraf</returns>
        Telegraf PostTelegrafs(TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string));

        /// <summary>
        /// Create a Telegraf configuration
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="telegrafPluginRequest">Telegraf configuration to create</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostTelegrafsWithRequestOptions(TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string));

		/// <summary>
        /// Create a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafPluginRequest">Telegraf configuration to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Telegraf</returns>
        ApiResponse<Telegraf> PostTelegrafsWithHttpInfo(TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string));
        /// <summary>
        /// Add a label to a Telegraf config
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        LabelResponse PostTelegrafsIDLabels(string telegrafID, LabelMapping labelMapping, string zapTraceSpan = default(string));

        /// <summary>
        /// Add a label to a Telegraf config
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="labelMapping">Label to add</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostTelegrafsIDLabelsWithRequestOptions(string telegrafID, LabelMapping labelMapping, string zapTraceSpan = default(string));

		/// <summary>
        /// Add a label to a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        ApiResponse<LabelResponse> PostTelegrafsIDLabelsWithHttpInfo(string telegrafID, LabelMapping labelMapping, string zapTraceSpan = default(string));
        /// <summary>
        /// Add a member to a Telegraf config
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        ResourceMember PostTelegrafsIDMembers(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));

        /// <summary>
        /// Add a member to a Telegraf config
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="addResourceMemberRequestBody">User to add as member</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostTelegrafsIDMembersWithRequestOptions(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));

		/// <summary>
        /// Add a member to a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        ApiResponse<ResourceMember> PostTelegrafsIDMembersWithHttpInfo(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));
        /// <summary>
        /// Add an owner to a Telegraf configuration
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        ResourceOwner PostTelegrafsIDOwners(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));

        /// <summary>
        /// Add an owner to a Telegraf configuration
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="telegrafID">The Telegraf configuration ID.</param>
		/// <param name="addResourceMemberRequestBody">User to add as owner</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PostTelegrafsIDOwnersWithRequestOptions(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));

		/// <summary>
        /// Add an owner to a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        ApiResponse<ResourceOwner> PostTelegrafsIDOwnersWithHttpInfo(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string));
        /// <summary>
        /// Update a Telegraf configuration
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="telegrafPluginRequest">Telegraf configuration update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Telegraf</returns>
        Telegraf PutTelegrafsID(string telegrafID, TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string));

        /// <summary>
        /// Update a Telegraf configuration
        /// </summary>
		/// <remarks>
        /// 
        /// </remarks>
		/// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="telegrafPluginRequest">Telegraf configuration update to apply</param>
		/// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
		/// <returns>RequestOptions</returns>
		RequestOptions PutTelegrafsIDWithRequestOptions(string telegrafID, TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string));

		/// <summary>
        /// Update a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="telegrafPluginRequest">Telegraf configuration update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Telegraf</returns>
        ApiResponse<Telegraf> PutTelegrafsIDWithHttpInfo(string telegrafID, TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITelegrafsServiceAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTelegrafsIDAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTelegrafsIDWithHttpInfoAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a label from a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelID">The label ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTelegrafsIDLabelsIDAsync(string telegrafID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a label from a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelID">The label ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTelegrafsIDLabelsIDWithHttpInfoAsync(string telegrafID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a member from a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTelegrafsIDMembersIDAsync(string userID, string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a member from a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTelegrafsIDMembersIDWithHttpInfoAsync(string userID, string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove an owner from a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTelegrafsIDOwnersIDAsync(string userID, string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an owner from a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTelegrafsIDOwnersIDWithHttpInfoAsync(string userID, string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all Telegraf configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">The organization ID the Telegraf config belongs to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Telegrafs</returns>
        System.Threading.Tasks.Task<Telegrafs> GetTelegrafsAsync(string zapTraceSpan = default(string), string orgID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all Telegraf configurations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">The organization ID the Telegraf config belongs to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Telegrafs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Telegrafs>> GetTelegrafsWithHttpInfoAsync(string zapTraceSpan = default(string), string orgID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="accept"> (optional, default to application/toml)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetTelegrafsIDAsync(string telegrafID, string zapTraceSpan = default(string), string accept = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="accept"> (optional, default to application/toml)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetTelegrafsIDWithHttpInfoAsync(string telegrafID, string zapTraceSpan = default(string), string accept = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all labels for a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelsResponse</returns>
        System.Threading.Tasks.Task<LabelsResponse> GetTelegrafsIDLabelsAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all labels for a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelsResponse>> GetTelegrafsIDLabelsWithHttpInfoAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all users with member privileges for a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceMembers</returns>
        System.Threading.Tasks.Task<ResourceMembers> GetTelegrafsIDMembersAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all users with member privileges for a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMembers>> GetTelegrafsIDMembersWithHttpInfoAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all owners of a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOwners</returns>
        System.Threading.Tasks.Task<ResourceOwners> GetTelegrafsIDOwnersAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all owners of a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwners>> GetTelegrafsIDOwnersWithHttpInfoAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafPluginRequest">Telegraf configuration to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Telegraf</returns>
        System.Threading.Tasks.Task<Telegraf> PostTelegrafsAsync(TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafPluginRequest">Telegraf configuration to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Telegraf)</returns>
        System.Threading.Tasks.Task<ApiResponse<Telegraf>> PostTelegrafsWithHttpInfoAsync(TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a label to a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelResponse</returns>
        System.Threading.Tasks.Task<LabelResponse> PostTelegrafsIDLabelsAsync(string telegrafID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a label to a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelResponse>> PostTelegrafsIDLabelsWithHttpInfoAsync(string telegrafID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a member to a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceMember</returns>
        System.Threading.Tasks.Task<ResourceMember> PostTelegrafsIDMembersAsync(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a member to a Telegraf config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceMember>> PostTelegrafsIDMembersWithHttpInfoAsync(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add an owner to a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOwner</returns>
        System.Threading.Tasks.Task<ResourceOwner> PostTelegrafsIDOwnersAsync(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add an owner to a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceOwner>> PostTelegrafsIDOwnersWithHttpInfoAsync(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="telegrafPluginRequest">Telegraf configuration update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Telegraf</returns>
        System.Threading.Tasks.Task<Telegraf> PutTelegrafsIDAsync(string telegrafID, TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Telegraf configuration
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="telegrafPluginRequest">Telegraf configuration update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Telegraf)</returns>
        System.Threading.Tasks.Task<ApiResponse<Telegraf>> PutTelegrafsIDWithHttpInfoAsync(string telegrafID, TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITelegrafsService : ITelegrafsServiceSync, ITelegrafsServiceAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TelegrafsService : IDisposable, ITelegrafsService
    {
        private InfluxDB.Client.Core.Api.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TelegrafsService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public TelegrafsService() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TelegrafsService"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TelegrafsService(string basePath)
        {
            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TelegrafsService"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TelegrafsService(InfluxDB.Client.Core.Api.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TelegrafsService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TelegrafsService(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TelegrafsService"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TelegrafsService(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                new InfluxDB.Client.Core.Api.Configuration { BasePath = basePath }
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TelegrafsService"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TelegrafsService(HttpClient client, InfluxDB.Client.Core.Api.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = InfluxDB.Client.Core.Api.Configuration.MergeConfigurations(
                InfluxDB.Client.Core.Api.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new InfluxDB.Client.Core.Api.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TelegrafsService"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public TelegrafsService(InfluxDB.Client.Core.Api.ISynchronousClient client, InfluxDB.Client.Core.Api.IAsynchronousClient asyncClient, InfluxDB.Client.Core.Api.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = InfluxDB.Client.Core.Api.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public InfluxDB.Client.Core.Api.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public InfluxDB.Client.Core.Api.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InfluxDB.Client.Core.Api.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InfluxDB.Client.Core.Api.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteTelegrafsID(string telegrafID, string zapTraceSpan = default(string))
        {
            DeleteTelegrafsIDWithHttpInfo(telegrafID, zapTraceSpan);
        }

        /// <summary>
        /// Delete a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteTelegrafsIDWithHttpInfo(string telegrafID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteTelegrafsIDWithRequestOptions(telegrafID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/telegrafs/{telegrafID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTelegrafsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteTelegrafsIDWithRequestOptions(string telegrafID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->DeleteTelegrafsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Delete a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTelegrafsIDAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTelegrafsIDWithHttpInfoAsync(telegrafID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteTelegrafsIDWithHttpInfoAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->DeleteTelegrafsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/telegrafs/{telegrafID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTelegrafsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a label from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelID">The label ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteTelegrafsIDLabelsID(string telegrafID, string labelID, string zapTraceSpan = default(string))
        {
            DeleteTelegrafsIDLabelsIDWithHttpInfo(telegrafID, labelID, zapTraceSpan);
        }

        /// <summary>
        /// Delete a label from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelID">The label ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteTelegrafsIDLabelsIDWithHttpInfo(string telegrafID, string labelID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteTelegrafsIDLabelsIDWithRequestOptions(telegrafID, labelID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/telegrafs/{telegrafID}/labels/{labelID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTelegrafsIDLabelsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a label from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelID">The label ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteTelegrafsIDLabelsIDWithRequestOptions(string telegrafID, string labelID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->DeleteTelegrafsIDLabelsID");

            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelID' when calling TelegrafsService->DeleteTelegrafsIDLabelsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            localVarRequestOptions.PathParameters.Add("labelID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Delete a label from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelID">The label ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTelegrafsIDLabelsIDAsync(string telegrafID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTelegrafsIDLabelsIDWithHttpInfoAsync(telegrafID, labelID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a label from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelID">The label ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteTelegrafsIDLabelsIDWithHttpInfoAsync(string telegrafID, string labelID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->DeleteTelegrafsIDLabelsID");

            // verify the required parameter 'labelID' is set
            if (labelID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelID' when calling TelegrafsService->DeleteTelegrafsIDLabelsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            localVarRequestOptions.PathParameters.Add("labelID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(labelID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/telegrafs/{telegrafID}/labels/{labelID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTelegrafsIDLabelsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a member from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteTelegrafsIDMembersID(string userID, string telegrafID, string zapTraceSpan = default(string))
        {
            DeleteTelegrafsIDMembersIDWithHttpInfo(userID, telegrafID, zapTraceSpan);
        }

        /// <summary>
        /// Remove a member from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteTelegrafsIDMembersIDWithHttpInfo(string userID, string telegrafID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteTelegrafsIDMembersIDWithRequestOptions(userID, telegrafID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/telegrafs/{telegrafID}/members/{userID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTelegrafsIDMembersID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a member from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteTelegrafsIDMembersIDWithRequestOptions(string userID, string telegrafID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'userID' when calling TelegrafsService->DeleteTelegrafsIDMembersID");

            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->DeleteTelegrafsIDMembersID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Remove a member from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTelegrafsIDMembersIDAsync(string userID, string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTelegrafsIDMembersIDWithHttpInfoAsync(userID, telegrafID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a member from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the member to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteTelegrafsIDMembersIDWithHttpInfoAsync(string userID, string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'userID' when calling TelegrafsService->DeleteTelegrafsIDMembersID");

            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->DeleteTelegrafsIDMembersID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/telegrafs/{telegrafID}/members/{userID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTelegrafsIDMembersID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an owner from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns></returns>
        public void DeleteTelegrafsIDOwnersID(string userID, string telegrafID, string zapTraceSpan = default(string))
        {
            DeleteTelegrafsIDOwnersIDWithHttpInfo(userID, telegrafID, zapTraceSpan);
        }

        /// <summary>
        /// Remove an owner from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Object> DeleteTelegrafsIDOwnersIDWithHttpInfo(string userID, string telegrafID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = DeleteTelegrafsIDOwnersIDWithRequestOptions(userID, telegrafID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v2/telegrafs/{telegrafID}/owners/{userID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTelegrafsIDOwnersID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an owner from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions DeleteTelegrafsIDOwnersIDWithRequestOptions(string userID, string telegrafID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'userID' when calling TelegrafsService->DeleteTelegrafsIDOwnersID");

            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->DeleteTelegrafsIDOwnersID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Remove an owner from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTelegrafsIDOwnersIDAsync(string userID, string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTelegrafsIDOwnersIDWithHttpInfoAsync(userID, telegrafID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an owner from a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userID">The ID of the owner to remove.</param>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Object>> DeleteTelegrafsIDOwnersIDWithHttpInfoAsync(string userID, string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userID' is set
            if (userID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'userID' when calling TelegrafsService->DeleteTelegrafsIDOwnersID");

            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->DeleteTelegrafsIDOwnersID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(userID)); // path parameter
            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v2/telegrafs/{telegrafID}/owners/{userID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTelegrafsIDOwnersID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Telegraf configurations 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">The organization ID the Telegraf config belongs to. (optional)</param>
        /// <returns>Telegrafs</returns>
        public Telegrafs GetTelegrafs(string zapTraceSpan = default(string), string orgID = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Telegrafs> localVarResponse = GetTelegrafsWithHttpInfo(zapTraceSpan, orgID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Telegraf configurations 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">The organization ID the Telegraf config belongs to. (optional)</param>
        /// <returns>ApiResponse of Telegrafs</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Telegrafs> GetTelegrafsWithHttpInfo(string zapTraceSpan = default(string), string orgID = default(string))
        {
			var localVarRequestOptions = GetTelegrafsWithRequestOptions(zapTraceSpan, orgID);

            // make the HTTP request
            var localVarResponse = this.Client.Get<Telegrafs>("/api/v2/telegrafs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTelegrafs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Telegraf configurations 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">The organization ID the Telegraf config belongs to. (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetTelegrafsWithRequestOptions(string zapTraceSpan = default(string), string orgID = default(string))
        {
            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (orgID != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all Telegraf configurations 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">The organization ID the Telegraf config belongs to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Telegrafs</returns>
        public async System.Threading.Tasks.Task<Telegrafs> GetTelegrafsAsync(string zapTraceSpan = default(string), string orgID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Telegrafs> localVarResponse = await GetTelegrafsWithHttpInfoAsync(zapTraceSpan, orgID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Telegraf configurations 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="orgID">The organization ID the Telegraf config belongs to. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Telegrafs)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Telegrafs>> GetTelegrafsWithHttpInfoAsync(string zapTraceSpan = default(string), string orgID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (orgID != null)
            {
                localVarRequestOptions.QueryParameters.Add(InfluxDB.Client.Core.Api.ClientUtils.ParameterToMultiMap("", "orgID", orgID));
            }
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Telegrafs>("/api/v2/telegrafs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTelegrafs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="accept"> (optional, default to application/toml)</param>
        /// <returns>string</returns>
        public string GetTelegrafsID(string telegrafID, string zapTraceSpan = default(string), string accept = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<string> localVarResponse = GetTelegrafsIDWithHttpInfo(telegrafID, zapTraceSpan, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="accept"> (optional, default to application/toml)</param>
        /// <returns>ApiResponse of string</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<string> GetTelegrafsIDWithHttpInfo(string telegrafID, string zapTraceSpan = default(string), string accept = default(string))
        {
			var localVarRequestOptions = GetTelegrafsIDWithRequestOptions(telegrafID, zapTraceSpan, accept);

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/api/v2/telegrafs/{telegrafID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTelegrafsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="accept"> (optional, default to application/toml)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetTelegrafsIDWithRequestOptions(string telegrafID, string zapTraceSpan = default(string), string accept = default(string))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->GetTelegrafsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/toml",
                "application/json",
                "application/octet-stream"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Retrieve a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="accept"> (optional, default to application/toml)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetTelegrafsIDAsync(string telegrafID, string zapTraceSpan = default(string), string accept = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<string> localVarResponse = await GetTelegrafsIDWithHttpInfoAsync(telegrafID, zapTraceSpan, accept, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="accept"> (optional, default to application/toml)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<string>> GetTelegrafsIDWithHttpInfoAsync(string telegrafID, string zapTraceSpan = default(string), string accept = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->GetTelegrafsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/toml",
                "application/json",
                "application/octet-stream"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(accept)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/api/v2/telegrafs/{telegrafID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTelegrafsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all labels for a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelsResponse</returns>
        public LabelsResponse GetTelegrafsIDLabels(string telegrafID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse> localVarResponse = GetTelegrafsIDLabelsWithHttpInfo(telegrafID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all labels for a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelsResponse</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse> GetTelegrafsIDLabelsWithHttpInfo(string telegrafID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetTelegrafsIDLabelsWithRequestOptions(telegrafID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<LabelsResponse>("/api/v2/telegrafs/{telegrafID}/labels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTelegrafsIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all labels for a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetTelegrafsIDLabelsWithRequestOptions(string telegrafID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->GetTelegrafsIDLabels");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all labels for a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelsResponse</returns>
        public async System.Threading.Tasks.Task<LabelsResponse> GetTelegrafsIDLabelsAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse> localVarResponse = await GetTelegrafsIDLabelsWithHttpInfoAsync(telegrafID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all labels for a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelsResponse)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<LabelsResponse>> GetTelegrafsIDLabelsWithHttpInfoAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->GetTelegrafsIDLabels");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LabelsResponse>("/api/v2/telegrafs/{telegrafID}/labels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTelegrafsIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all users with member privileges for a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMembers</returns>
        public ResourceMembers GetTelegrafsIDMembers(string telegrafID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceMembers> localVarResponse = GetTelegrafsIDMembersWithHttpInfo(telegrafID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all users with member privileges for a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMembers</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<ResourceMembers> GetTelegrafsIDMembersWithHttpInfo(string telegrafID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetTelegrafsIDMembersWithRequestOptions(telegrafID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceMembers>("/api/v2/telegrafs/{telegrafID}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTelegrafsIDMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all users with member privileges for a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetTelegrafsIDMembersWithRequestOptions(string telegrafID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->GetTelegrafsIDMembers");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all users with member privileges for a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceMembers</returns>
        public async System.Threading.Tasks.Task<ResourceMembers> GetTelegrafsIDMembersAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceMembers> localVarResponse = await GetTelegrafsIDMembersWithHttpInfoAsync(telegrafID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all users with member privileges for a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceMembers)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<ResourceMembers>> GetTelegrafsIDMembersWithHttpInfoAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->GetTelegrafsIDMembers");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceMembers>("/api/v2/telegrafs/{telegrafID}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTelegrafsIDMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all owners of a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwners</returns>
        public ResourceOwners GetTelegrafsIDOwners(string telegrafID, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceOwners> localVarResponse = GetTelegrafsIDOwnersWithHttpInfo(telegrafID, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all owners of a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwners</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<ResourceOwners> GetTelegrafsIDOwnersWithHttpInfo(string telegrafID, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = GetTelegrafsIDOwnersWithRequestOptions(telegrafID, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceOwners>("/api/v2/telegrafs/{telegrafID}/owners", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTelegrafsIDOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all owners of a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions GetTelegrafsIDOwnersWithRequestOptions(string telegrafID, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->GetTelegrafsIDOwners");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// List all owners of a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOwners</returns>
        public async System.Threading.Tasks.Task<ResourceOwners> GetTelegrafsIDOwnersAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceOwners> localVarResponse = await GetTelegrafsIDOwnersWithHttpInfoAsync(telegrafID, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all owners of a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOwners)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<ResourceOwners>> GetTelegrafsIDOwnersWithHttpInfoAsync(string telegrafID, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->GetTelegrafsIDOwners");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceOwners>("/api/v2/telegrafs/{telegrafID}/owners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTelegrafsIDOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafPluginRequest">Telegraf configuration to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Telegraf</returns>
        public Telegraf PostTelegrafs(TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Telegraf> localVarResponse = PostTelegrafsWithHttpInfo(telegrafPluginRequest, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafPluginRequest">Telegraf configuration to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Telegraf</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Telegraf> PostTelegrafsWithHttpInfo(TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostTelegrafsWithRequestOptions(telegrafPluginRequest, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<Telegraf>("/api/v2/telegrafs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTelegrafs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafPluginRequest">Telegraf configuration to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostTelegrafsWithRequestOptions(TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'telegrafPluginRequest' is set
            if (telegrafPluginRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafPluginRequest' when calling TelegrafsService->PostTelegrafs");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = telegrafPluginRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Create a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafPluginRequest">Telegraf configuration to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Telegraf</returns>
        public async System.Threading.Tasks.Task<Telegraf> PostTelegrafsAsync(TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Telegraf> localVarResponse = await PostTelegrafsWithHttpInfoAsync(telegrafPluginRequest, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafPluginRequest">Telegraf configuration to create</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Telegraf)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Telegraf>> PostTelegrafsWithHttpInfoAsync(TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'telegrafPluginRequest' is set
            if (telegrafPluginRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafPluginRequest' when calling TelegrafsService->PostTelegrafs");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = telegrafPluginRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Telegraf>("/api/v2/telegrafs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTelegrafs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a label to a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>LabelResponse</returns>
        public LabelResponse PostTelegrafsIDLabels(string telegrafID, LabelMapping labelMapping, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelResponse> localVarResponse = PostTelegrafsIDLabelsWithHttpInfo(telegrafID, labelMapping, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a label to a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of LabelResponse</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<LabelResponse> PostTelegrafsIDLabelsWithHttpInfo(string telegrafID, LabelMapping labelMapping, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostTelegrafsIDLabelsWithRequestOptions(telegrafID, labelMapping, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<LabelResponse>("/api/v2/telegrafs/{telegrafID}/labels", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTelegrafsIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a label to a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostTelegrafsIDLabelsWithRequestOptions(string telegrafID, LabelMapping labelMapping, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->PostTelegrafsIDLabels");

            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelMapping' when calling TelegrafsService->PostTelegrafsIDLabels");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = labelMapping;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Add a label to a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LabelResponse</returns>
        public async System.Threading.Tasks.Task<LabelResponse> PostTelegrafsIDLabelsAsync(string telegrafID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<LabelResponse> localVarResponse = await PostTelegrafsIDLabelsWithHttpInfoAsync(telegrafID, labelMapping, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a label to a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="labelMapping">Label to add</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LabelResponse)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<LabelResponse>> PostTelegrafsIDLabelsWithHttpInfoAsync(string telegrafID, LabelMapping labelMapping, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->PostTelegrafsIDLabels");

            // verify the required parameter 'labelMapping' is set
            if (labelMapping == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'labelMapping' when calling TelegrafsService->PostTelegrafsIDLabels");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = labelMapping;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<LabelResponse>("/api/v2/telegrafs/{telegrafID}/labels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTelegrafsIDLabels", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a member to a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceMember</returns>
        public ResourceMember PostTelegrafsIDMembers(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceMember> localVarResponse = PostTelegrafsIDMembersWithHttpInfo(telegrafID, addResourceMemberRequestBody, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a member to a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceMember</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<ResourceMember> PostTelegrafsIDMembersWithHttpInfo(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostTelegrafsIDMembersWithRequestOptions(telegrafID, addResourceMemberRequestBody, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResourceMember>("/api/v2/telegrafs/{telegrafID}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTelegrafsIDMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a member to a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostTelegrafsIDMembersWithRequestOptions(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->PostTelegrafsIDMembers");

            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling TelegrafsService->PostTelegrafsIDMembers");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = addResourceMemberRequestBody;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Add a member to a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceMember</returns>
        public async System.Threading.Tasks.Task<ResourceMember> PostTelegrafsIDMembersAsync(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceMember> localVarResponse = await PostTelegrafsIDMembersWithHttpInfoAsync(telegrafID, addResourceMemberRequestBody, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a member to a Telegraf config 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as member</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceMember)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<ResourceMember>> PostTelegrafsIDMembersWithHttpInfoAsync(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->PostTelegrafsIDMembers");

            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling TelegrafsService->PostTelegrafsIDMembers");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = addResourceMemberRequestBody;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceMember>("/api/v2/telegrafs/{telegrafID}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTelegrafsIDMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an owner to a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ResourceOwner</returns>
        public ResourceOwner PostTelegrafsIDOwners(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceOwner> localVarResponse = PostTelegrafsIDOwnersWithHttpInfo(telegrafID, addResourceMemberRequestBody, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an owner to a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of ResourceOwner</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<ResourceOwner> PostTelegrafsIDOwnersWithHttpInfo(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PostTelegrafsIDOwnersWithRequestOptions(telegrafID, addResourceMemberRequestBody, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResourceOwner>("/api/v2/telegrafs/{telegrafID}/owners", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTelegrafsIDOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an owner to a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PostTelegrafsIDOwnersWithRequestOptions(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->PostTelegrafsIDOwners");

            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling TelegrafsService->PostTelegrafsIDOwners");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = addResourceMemberRequestBody;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Add an owner to a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceOwner</returns>
        public async System.Threading.Tasks.Task<ResourceOwner> PostTelegrafsIDOwnersAsync(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<ResourceOwner> localVarResponse = await PostTelegrafsIDOwnersWithHttpInfoAsync(telegrafID, addResourceMemberRequestBody, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an owner to a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf configuration ID.</param>
        /// <param name="addResourceMemberRequestBody">User to add as owner</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceOwner)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<ResourceOwner>> PostTelegrafsIDOwnersWithHttpInfoAsync(string telegrafID, AddResourceMemberRequestBody addResourceMemberRequestBody, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->PostTelegrafsIDOwners");

            // verify the required parameter 'addResourceMemberRequestBody' is set
            if (addResourceMemberRequestBody == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'addResourceMemberRequestBody' when calling TelegrafsService->PostTelegrafsIDOwners");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = addResourceMemberRequestBody;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ResourceOwner>("/api/v2/telegrafs/{telegrafID}/owners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTelegrafsIDOwners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="telegrafPluginRequest">Telegraf configuration update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>Telegraf</returns>
        public Telegraf PutTelegrafsID(string telegrafID, TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Telegraf> localVarResponse = PutTelegrafsIDWithHttpInfo(telegrafID, telegrafPluginRequest, zapTraceSpan);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="telegrafPluginRequest">Telegraf configuration update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>ApiResponse of Telegraf</returns>
        public InfluxDB.Client.Core.Api.ApiResponse<Telegraf> PutTelegrafsIDWithHttpInfo(string telegrafID, TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string))
        {
			var localVarRequestOptions = PutTelegrafsIDWithRequestOptions(telegrafID, telegrafPluginRequest, zapTraceSpan);

            // make the HTTP request
            var localVarResponse = this.Client.Put<Telegraf>("/api/v2/telegrafs/{telegrafID}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutTelegrafsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="telegrafPluginRequest">Telegraf configuration update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <returns>RequestOptions</returns>
        public RequestOptions PutTelegrafsIDWithRequestOptions(string telegrafID, TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->PutTelegrafsID");

            // verify the required parameter 'telegrafPluginRequest' is set
            if (telegrafPluginRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafPluginRequest' when calling TelegrafsService->PutTelegrafsID");

            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = telegrafPluginRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            return localVarRequestOptions;
        }

        /// <summary>
        /// Update a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="telegrafPluginRequest">Telegraf configuration update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Telegraf</returns>
        public async System.Threading.Tasks.Task<Telegraf> PutTelegrafsIDAsync(string telegrafID, TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            InfluxDB.Client.Core.Api.ApiResponse<Telegraf> localVarResponse = await PutTelegrafsIDWithHttpInfoAsync(telegrafID, telegrafPluginRequest, zapTraceSpan, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Telegraf configuration 
        /// </summary>
        /// <exception cref="InfluxDB.Client.Core.Api.ApiException">Thrown when fails to make API call</exception>
        /// <param name="telegrafID">The Telegraf config ID.</param>
        /// <param name="telegrafPluginRequest">Telegraf configuration update to apply</param>
        /// <param name="zapTraceSpan">OpenTracing span context (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Telegraf)</returns>
        public async System.Threading.Tasks.Task<InfluxDB.Client.Core.Api.ApiResponse<Telegraf>> PutTelegrafsIDWithHttpInfoAsync(string telegrafID, TelegrafPluginRequest telegrafPluginRequest, string zapTraceSpan = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'telegrafID' is set
            if (telegrafID == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafID' when calling TelegrafsService->PutTelegrafsID");

            // verify the required parameter 'telegrafPluginRequest' is set
            if (telegrafPluginRequest == null)
                throw new InfluxDB.Client.Core.Api.ApiException(400, "Missing required parameter 'telegrafPluginRequest' when calling TelegrafsService->PutTelegrafsID");


            InfluxDB.Client.Core.Api.RequestOptions localVarRequestOptions = new InfluxDB.Client.Core.Api.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = InfluxDB.Client.Core.Api.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("telegrafID", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(telegrafID)); // path parameter
            if (zapTraceSpan != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Zap-Trace-Span", InfluxDB.Client.Core.Api.ClientUtils.ParameterToString(zapTraceSpan)); // header parameter
            }
            localVarRequestOptions.Data = telegrafPluginRequest;

            // authentication (TokenAuthentication) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Telegraf>("/api/v2/telegrafs/{telegrafID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutTelegrafsID", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
